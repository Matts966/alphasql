//
// Copyright 2019 ZetaSQL Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// LINT: ALLOW_GROUPS - need to test groups
// LINT: LEGACY_NAMES - need to test weird casing
syntax = "proto2";

package zetasql_test;

import "google/protobuf/descriptor.proto";
import "zetasql/public/proto/type_annotation.proto";
import "zetasql/public/proto/wire_format_annotation.proto";

option java_package = "com.google.zetasqltest";
option java_outer_classname = "TestSchemaProto";

message EnumAnnotations {
  extend google.protobuf.EnumValueOptions {
    optional double double_enum_annotation = 254852985;
  }
  enum NestedEnum {
    NESTEDENUM0 = 0;
    NESTEDENUM_DOUBLE = 1 [(double_enum_annotation) = 987.654];
  }
  optional string nested_string_annotation = 1;
  optional bool nested_bool_annotation = 2;
  optional int64 nested_int64_annotation_default = 3 [default = 13];
  optional NestedEnum nested_enum_annotation = 4;
}

extend google.protobuf.EnumValueOptions {
  optional int64 int64_annotation = 254852976;
  optional int64 int32_annotation = 254852977;
  optional string string_annotation = 254852978;
  optional string string_default_annotation = 254852979
      [default = "enum_annotation"];
  optional bool bool_annotation = 254852980;
  optional EnumAnnotations nested_message_annotation = 254852981;
  optional int32 date_annotation = 254852982 [(zetasql.format) = DATE];
  optional int64 timestamp_annotation = 254852983
      [(zetasql.format) = TIMESTAMP_MICROS];
  optional TestEnum enum_annotation = 254852984;
}

enum TestEnum {
  TESTENUM0 = 0;
  TESTENUM1 = 1;
  TESTENUM2 = 2;
  TESTENUM2147483647 = 2147483647;
  TESTENUMNEGATIVE = -1;
}

enum TestEnumWithAnnotations {
  TESTENUM_NO_ANNOTATION = 1;
  TESTENUM_STRING_ANNOTATED = 2 [(string_annotation) = "some_name"];
  TESTENUM_INT64_ANNOTATED = 3 [(int64_annotation) = 123];
  TESTENUM_MULTIPLE_ANNOTATION = 4
      [(bool_annotation) = true, (int32_annotation) = 321];
  ANOTHERTESTENUM_DATE_ANNOTATED = 5 [(date_annotation) = 10346];
  ANOTHERTESTENUM_MESSAGE_ANNOTATED = 6 [(nested_message_annotation) = {
    nested_string_annotation: "abc",
    nested_bool_annotation: true
  }];
}

enum AnotherTestEnum {
  ANOTHERTESTENUM0 = 0;
  ANOTHERTESTENUM1 = 1;
  ANOTHERTESTENUM2 = 2;
}

enum TestEnumWithAlias {
  option allow_alias = true;

  FIRSTENUM = 0;
  FIRSTENUM_WITHALIAS = 0;
  SECOND_ENUM = 1;
  FIRSTENUM_WITHSECONDALIAS = 0;
}

message TestExtraPB {
  extensions 10323131;

  extensions 10323132 to max;
  optional int32 int32_val1 = 1;
  optional int32 int32_val2 = 2;
  repeated string str_value = 3;
}

message RepeatedHolderPB {
  repeated TestExtraPB repeated_field = 1;
}

// Next ID to use: 108
message KitchenSinkPB {
  required int64 int64_key_1 = 1;
  required int64 int64_key_2 = 2;

  // Optional, all types.
  optional int32 int32_val = 3 [default = 77];
  optional uint32 uint32_val = 4 [default = 777];
  optional int64 int64_val = 5;
  optional uint64 uint64_val = 6;
  optional string string_val = 7 [default = "default_name"];
  optional float float_val = 8;
  optional double double_val = 9;
  optional bytes bytes_val = 10;
  optional bool bool_val = 11;
  optional fixed32 fixed32_val = 12;
  optional fixed64 fixed64_val = 13;
  optional sfixed32 sfixed32_val = 14;
  optional sfixed64 sfixed64_val = 15;
  optional sint32 sint32_val = 16;
  optional sint64 sint64_val = 17;

  // Repeated, all types.
  repeated int32 repeated_int32_val = 18;
  repeated uint32 repeated_uint32_val = 19;
  repeated int64 repeated_int64_val = 20;
  repeated uint64 repeated_uint64_val = 21;
  repeated string repeated_string_val = 22;
  repeated float repeated_float_val = 23;
  repeated double repeated_double_val = 24;
  repeated bytes repeated_bytes_val = 25;
  repeated bool repeated_bool_val = 26;
  repeated fixed32 repeated_fixed32_val = 27;
  repeated fixed64 repeated_fixed64_val = 28;
  repeated sfixed32 repeated_sfixed32_val = 29;
  repeated sfixed64 repeated_sfixed64_val = 30;
  repeated sint32 repeated_sint32_val = 31;
  repeated sint64 repeated_sint64_val = 32;

  message Nested {
    optional int64 nested_int64 = 1 [default = 88];
    repeated int64 nested_repeated_int64 = 2;
    repeated int32 nested_repeated_int32 = 3;
    repeated int32 value = 4;
    extensions 100 to max;
  }

  extend Nested {
    optional int64 nested_extension_int64 = 100;
  }

  optional Nested nested_value = 33;
  repeated Nested nested_repeated_value = 34;

  repeated RepeatedHolderPB repeated_holder = 35;

  optional TestEnum test_enum = 36;
  repeated TestEnum repeated_test_enum = 37;

  optional group OptionalGroup = 38 {
    required int64 int64_val = 1;
    optional string string_val = 2;
    repeated group OptionalGroupNested = 3 {
      required int64 int64_val = 1;
    }
  }
  optional OptionalGroup optional_group = 39;

  repeated group NestedRepeatedGroup = 40 {
    required int64 id = 1;
    optional string idstr = 2;
    repeated group NestedRepeatedGroupNested = 3 {
      required int64 id = 1;
    }
  }
  repeated NestedRepeatedGroup nested_repeated_group = 41;

  // Annotated date types.  We use the current <format> annotation and the
  // deprecated <type> annotation interchangeably.  <format> overrides <type>
  // if both are present.
  optional int32 date = 42 [(zetasql.format) = DATE];
  optional int32 date_default = 78 [(zetasql.format) = DATE, default = 10950];
  // Fields with the DATE_DECIMAL annotation that have a value of 0 are treated
  // as NULL when read from a proto. When two protos are compared, however,
  // an unset field is treated differently than a field with a value of 0. To
  // ensure that Value::Equals treats the two cases the same within the RQG,
  // these fields have a default of 0. See b/116239035 for background.
  optional int32 date_decimal = 65
      [(zetasql.type) = DATE_DECIMAL, default = 0];
  optional int32 date_decimal_legacy = 68
      [(zetasql.type) = DATE, (zetasql.encoding) = DATE_PACKED32];
  optional int32 date_decimal_default = 77
      [(zetasql.type) = DATE_DECIMAL, default = 20130517];

  optional int64 date64 = 43 [(zetasql.type) = DATE];
  optional int64 date64_decimal = 69 [
    (zetasql.format) = DATE_DECIMAL,
    (zetasql.type) = TIMESTAMP_MILLIS /* this is ignored */,
    default = 0
  ];
  optional int64 date64_decimal_legacy = 66
      [(zetasql.encoding) = DATE_PACKED32, (zetasql.format) = DATE];

  optional int64 timestamp_seconds = 44 [(zetasql.type) = TIMESTAMP_SECONDS];
  optional int64 timestamp_millis = 45 [(zetasql.type) = TIMESTAMP_MILLIS];
  optional int64 timestamp_micros = 46 [(zetasql.type) = TIMESTAMP_MICROS];
  optional int64 timestamp_seconds_format = 82
      [(zetasql.format) = TIMESTAMP_SECONDS];
  optional int64 timestamp_millis_format = 83
      [(zetasql.format) = TIMESTAMP_MILLIS];
  optional int64 timestamp_micros_format = 84
      [(zetasql.format) = TIMESTAMP_MICROS];
  optional uint64 timestamp_uint64 = 80 [(zetasql.format) = TIMESTAMP_MICROS];
  optional uint64 timestamp_uint64_default = 81 [
    (zetasql.format) = TIMESTAMP_MICROS,
    // 1961-03-25 02:31:56.000000 PST
    default = 18446467286025782675
  ];

  repeated int32 repeated_date = 48 [(zetasql.type) = DATE];
  repeated int64 repeated_date64 = 49 [(zetasql.type) = DATE];
  repeated int64 repeated_timestamp_seconds = 50
      [(zetasql.type) = TIMESTAMP_SECONDS];
  repeated int64 repeated_timestamp_millis = 51
      [(zetasql.type) = TIMESTAMP_MILLIS];
  repeated int64 repeated_timestamp_micros = 52
      [(zetasql.type) = TIMESTAMP_MICROS];
  repeated int64 repeated_timestamp_seconds_format = 85
      [(zetasql.format) = TIMESTAMP_SECONDS];
  repeated int64 repeated_timestamp_millis_format = 86
      [(zetasql.format) = TIMESTAMP_MILLIS];
  repeated int64 repeated_timestamp_micros_format = 87
      [(zetasql.format) = TIMESTAMP_MICROS];

  message NestedDates {
    optional int32 date = 1 [(zetasql.type) = DATE];
    optional int32 date_decimal = 2 [
      (zetasql.type) = DATE,
      (zetasql.encoding) = DATE_DECIMAL,
      default = 0
    ];
    optional int64 timestamp_millis = 3 [(zetasql.type) = TIMESTAMP_MILLIS];
  }
  optional NestedDates nested_dates = 67;

  // Annotations for defaults.
  optional int64 int_with_no_default = 54;
  optional int64 int_with_default = 55 [default = 17];
  optional int64 int_with_no_default_nullable = 56
      [(zetasql.use_defaults) = false];
  optional int64 int_with_default_nullable = 57
      [default = 17, (zetasql.use_defaults) = false];

  optional MessageWithNulls message_with_nulls = 58;

  // Protos annotated as wrappers just for adding nullability.
  optional NullableInt nullable_int = 59;
  repeated NullableInt nullable_int_array = 60;

  // Proto annotated so it should act like a struct.
  optional KeyValueStruct key_value = 61;
  repeated KeyValueStruct key_value_array = 62;

  // Field with the prefix has_ that isn't a has bit.
  optional string has_confusing_name = 63;

  optional string MIXED_case = 64;

  optional AnnotatedStruct annotated_struct = 70;
  repeated AnnotatedStruct annotated_struct_array = 71;

  optional RewrappedNullableInt rewrapped_nullable_int = 72;

  repeated NullableDate array_of_nullable_date = 73;
  optional NullableArrayOfNullableDate nullable_array_of_nullable_date = 74;

  optional EmptyMessage empty_message = 76;

  optional TestExtraPB test_extra_pb = 79;

  optional TestEnumWithAnnotations test_enum_annotated = 107;

  // This conflicts with a zetasql keyword, and will need to be escaped.
  // E.g., `where`.
  optional int64 where = 88;

  // Packed repeated, all packable types.
  repeated int32 repeated_int32_packed = 89 [packed = true];
  repeated uint32 repeated_uint32_packed = 90 [packed = true];
  repeated int64 repeated_int64_packed = 91 [packed = true];
  repeated uint64 repeated_uint64_packed = 92 [packed = true];
  repeated float repeated_float_packed = 93 [packed = true];
  repeated double repeated_double_packed = 94 [packed = true];
  repeated bool repeated_bool_packed = 95 [packed = true];
  repeated fixed32 repeated_fixed32_packed = 96 [packed = true];
  repeated fixed64 repeated_fixed64_packed = 97 [packed = true];
  repeated sfixed32 repeated_sfixed32_packed = 98 [packed = true];
  repeated sfixed64 repeated_sfixed64_packed = 99 [packed = true];
  repeated sint32 repeated_sint32_packed = 100 [packed = true];
  repeated sint64 repeated_sint64_packed = 101 [packed = true];
  repeated TestEnum repeated_enum_packed = 102 [packed = true];

  oneof one_of_field {
    int32 int32_one_of = 104;
    string string_one_of = 105;
  }
  oneof one_of_field2 {
    int64 int64_one_of = 106;
  }

  reserved 103;  // Used for testing unknown fields.

  extensions 1000 to 1008;
}

message MessageWithMapField {
  map<string, int32> string_int32_map = 1;
}

message PackedRepeatablePB {
  repeated int32 repeated_int32_packed = 1 [packed = true];
  repeated uint32 repeated_uint32_packed = 2 [packed = true];
  repeated int64 repeated_int64_packed = 3 [packed = true];
  repeated uint64 repeated_uint64_packed = 4 [packed = true];
  repeated float repeated_float_packed = 5 [packed = true];
  repeated double repeated_double_packed = 6 [packed = true];
  repeated bool repeated_bool_packed = 7 [packed = true];
  repeated fixed32 repeated_fixed32_packed = 8 [packed = true];
  repeated fixed64 repeated_fixed64_packed = 9 [packed = true];
  repeated sfixed32 repeated_sfixed32_packed = 10 [packed = true];
  repeated sfixed64 repeated_sfixed64_packed = 11 [packed = true];
  repeated sint32 repeated_sint32_packed = 12 [packed = true];
  repeated sint64 repeated_sint64_packed = 13 [packed = true];
  repeated TestEnum repeated_enum_packed = 14 [packed = true];
}

// For engines not recognizing TIME_MICROS and DATETIME_MICROS, having such
// annotation will make the entire proto invalid. Collect all relevant fields
// with the annotations in a new proto.
// TODO: merge the fields in this proto into KitchenSinkPB
message CivilTimeTypesSinkPB {
  optional int64 time_micros = 1 [(zetasql.format) = TIME_MICROS];
  optional int64 time_micros_default = 2 [
    (zetasql.format) = TIME_MICROS,
    // 12:34:56.654321
    default = 53880683505
  ];

  optional int64 datetime_micros = 3 [(zetasql.format) = DATETIME_MICROS];
  optional int64 datetime_micros_default = 4 [
    (zetasql.format) = DATETIME_MICROS,
    // 1970-01-01 00:00:00
    default = 138630961515462656
  ];

  repeated int64 repeated_time_micros = 5 [(zetasql.format) = TIME_MICROS];
  repeated int64 repeated_datetime_micros = 6
      [(zetasql.format) = DATETIME_MICROS];

  message NestedCivilTimeFields {
    optional int64 time_micros = 1 [(zetasql.format) = TIME_MICROS];
    optional int64 datetime_micros = 2 [(zetasql.format) = DATETIME_MICROS];
  }
  optional NestedCivilTimeFields nested_civil_time_fields = 7;

  message NestedCivilTimeRepeatedFields {
    repeated int64 repeated_time_micros = 1 [(zetasql.format) = TIME_MICROS];
    repeated int64 repeated_datetime_micros = 2
        [(zetasql.format) = DATETIME_MICROS];
  }
  optional NestedCivilTimeRepeatedFields nested_civil_time_repeated_fields = 8;

  // Note that the following two keys are required in KitchenSinkPB. They are
  // made optional in CivilTimeTypesSinkPB to make testing easier.
  optional int64 int64_key_1 = 501;
  optional int64 int64_key_2 = 502;

  extensions 1000 to 1010;
}

extend CivilTimeTypesSinkPB {
  optional int64 time_micros_extension = 1000
      [(zetasql.format) = TIME_MICROS];
  repeated int64 repeated_time_micros_extension = 1001
      [(zetasql.format) = TIME_MICROS];
}

message NullableInt {
  option (zetasql.is_wrapper) = true;

  optional int32 value = 1 [(zetasql.use_defaults) = false];
}

message NullableDate {
  option (zetasql.is_wrapper) = true;

  optional int32 value = 1
      [(zetasql.format) = DATE, (zetasql.use_defaults) = false];
}

message NullableEnum {
  option (zetasql.is_wrapper) = true;

  optional TestEnum value = 1;
}

message NullableArrayOfInt {
  option (zetasql.is_wrapper) = true;

  repeated int32 value = 1;
}

message NullableArrayOfNullableInt {
  option (zetasql.is_wrapper) = true;

  repeated NullableInt value = 1;
}

message NullableArrayOfNullableDate {
  option (zetasql.is_wrapper) = true;

  repeated NullableDate value = 1;
}

// A double-wrapped proto.  Currently useless, but it should work.
message RewrappedNullableInt {
  option (zetasql.is_wrapper) = true;

  optional NullableInt value = 1;
}

message KeyValueStruct {
  option (zetasql.is_struct) = true;
  option (zetasql.use_field_defaults) = false;

  optional string key = 1;
  optional int64 value = 2;
}

// Test a struct with duplicate and anonymous fields.
message AnnotatedStruct {
  option (zetasql.is_struct) = true;
  option (zetasql.use_field_defaults) = false;

  optional string f1 = 1 [(zetasql.struct_field_name) = "key"];
  optional int32 f2 = 2 [(zetasql.struct_field_name) = "key"];
  optional int32 f3 = 3
      [(zetasql.format) = DATE, (zetasql.struct_field_name) = ""];
  optional bytes f4 = 4
      [(zetasql.struct_field_name) = "", (zetasql.use_defaults) = true];
  repeated int64 f5 = 5 [(zetasql.struct_field_name) = "value"];
}

// This message reverses the field level use_field_defaults setting, and then
// sets it back to true for specific fields.
message MessageWithNulls {
  option (zetasql.use_field_defaults) = false;

  optional int64 i1 = 1;
  optional int64 i2 = 2 [default = 3];
  optional int64 i3 = 3 [(zetasql.use_defaults) = true];
  optional int64 i4 = 4 [default = 6, (zetasql.use_defaults) = true];
}

// This message contains a required field that is annotated with
// zetasql.use_defaults = false. This annotation does not affect the
// resolution of this field as required fields must be set.
message RequiredFieldDoesNotUseDefaults {
  required int64 int64_key_no_default = 1 [(zetasql.use_defaults) = false];
}

// This message sets 'use_field_defaults' to the non-default setting, which
// normally applies to all fields. However, this setting should not impact
// required fields since they must be set anyway and effectively have no
// default.
message RequiredFieldNoFieldDefaults {
  option (zetasql.use_field_defaults) = false;

  required int64 int64_key = 1;
}

// This message contains a message level annotation to !use_field_defaults.
message MessageWithKitchenSinkPB {
  option (zetasql.use_field_defaults) = false;

  // KitchenSinkPB does not set use_field_defaults;
  optional KitchenSinkPB kitchen_sink = 1;
  // MessageWithNulls does set use_field_defaults;
  optional MessageWithNulls message_with_nulls = 2;
}

message TestNullabilityInnerPB {
  required int64 required_field = 1;
  optional int64 optional_field = 2;
  repeated int64 repeated_field = 3;
}

message TestNullabilityMiddlePB {
  required int64 required_field = 1;
  optional int64 optional_field = 2;
  repeated int64 repeated_field = 3;

  optional TestNullabilityInnerPB optional_nested = 4;
  required TestNullabilityInnerPB required_nested = 5;
  repeated TestNullabilityInnerPB repeated_nested = 6;
}

message TestNullabilityOuterPB {
  required int64 required_field = 1;
  optional int64 optional_field = 2;
  repeated int64 repeated_field = 3;

  optional TestNullabilityMiddlePB optional_nested = 4;
  required TestNullabilityMiddlePB required_nested = 5;
  repeated TestNullabilityMiddlePB repeated_nested = 6;
}

message TestExtraPBExtensionHolder {
  extend TestExtraPB {
    optional TestExtraPBExtensionHolder test_extra_proto_extension = 10323132;
  }
  repeated int32 ext_value = 1;
}

// Test extension inside a nested message.
message TestExtraPBExtensionOuter {
  message TestExtraPBExtensionInner {
    extend TestExtraPB {
      optional TestExtraPBExtensionInner nested_extension = 96061083;
    }
    repeated int32 inner_value = 1;
  }
  optional int32 some_field = 1;
}

message TestOptionalFields {
  optional int64 value = 1;

  message Nested {
    optional int64 value = 1;
  }
  optional Nested nested = 2;
}

// This is useful for specifically testing absl::Status payloads.
//
message TestStatusPayload {
  optional string value = 1;
}

message TestStatusPayload2 {
  optional int32 f1 = 1;
  optional int32 f2 = 2;
}

message KitchenSinkExtension {
  optional string value = 1;
  repeated string repeated_value = 2;

  extend KitchenSinkPB {
    optional int64 int_extension = 1000;
    optional KitchenSinkExtension optional_extension = 1001;
    repeated KitchenSinkExtension repeated_extension = 1002;
  }
}

// Extension that is not nested within a message.
extend KitchenSinkPB {
  optional int64 int_top_level_extension = 1003;
  repeated int64 repeated_int_top_level_extension = 1006;
}

// 32-bit integer extension that is not nested within a message. Useful for
// testing the combination of implicit casts and extensions.
extend KitchenSinkPB {
  optional int32 int32_top_level_extension = 1004;
}

// Extension with a format annotation.
extend KitchenSinkPB {
  optional int32 date_extension = 1005 [(zetasql.format) = DATE];
  repeated int32 repeated_date_extension = 1008 [(zetasql.format) = DATE];
}

message EmptyMessage {}

// A proto with recursive regular and extension fields to facilitate testing of
// long chains of the form
// foo.bar.(path.to.extension).baz.(path.to.extension)...  This is separate from
// KitchenSinkPB because that proto is used by the random query tests.
message RecursivePB {
  extensions 100 to max;
  optional int64 int64_val = 1;
  optional RecursivePB recursive_pb = 2;
  repeated RecursivePB repeated_recursive_pb = 3;
  oneof test_oneof {
    int64 oneof_int64_val = 4;
  }
  extend RecursivePB {
    optional RecursivePB recursive_pb_extension = 100;
    repeated RecursivePB repeated_recursive_pb_extension = 101;
  }
}

// The fields of this proto represent all possible combinations of field
// type, format, and repeatedness.
message FieldFormatsProto {
  optional int32 date = 101 [(zetasql.format) = DATE];
  optional int64 date_64 = 102 [(zetasql.type) = DATE];
  optional int32 date_decimal = 103 [(zetasql.type) = DATE_DECIMAL];
  optional int64 date_decimal_64 = 104 [(zetasql.format) = DATE_DECIMAL];
  // (zetasql.type) and (zetasql.encoding) are deprecated,
  // (zetasql.format) is supported.
  optional int32 date_decimal_encoding = 112
      [(zetasql.type) = DATE, (zetasql.encoding) = DATE_DECIMAL];
  optional int64 seconds = 105 [(zetasql.type) = TIMESTAMP_SECONDS];
  optional int64 millis = 106 [(zetasql.type) = TIMESTAMP_MILLIS];
  optional int64 micros = 107 [(zetasql.type) = TIMESTAMP_MICROS];
  optional int64 seconds_format = 109 [(zetasql.format) = TIMESTAMP_SECONDS];
  optional int64 millis_format = 110 [(zetasql.format) = TIMESTAMP_MILLIS];
  optional int64 micros_format = 111 [(zetasql.format) = TIMESTAMP_MICROS];
  optional uint64 micros_u64 = 108 [(zetasql.format) = TIMESTAMP_MICROS];
  optional int32 no_annotation = 113;

  optional sint32 s_date = 201 [(zetasql.format) = DATE];
  optional sint64 s_date_64 = 202 [(zetasql.type) = DATE];
  optional sint32 s_date_decimal = 203 [(zetasql.type) = DATE_DECIMAL];
  optional sint64 s_date_decimal_64 = 204 [(zetasql.format) = DATE_DECIMAL];
  optional sint64 s_seconds = 205 [(zetasql.type) = TIMESTAMP_SECONDS];
  optional sint64 s_millis = 206 [(zetasql.type) = TIMESTAMP_MILLIS];
  optional sint64 s_micros = 207 [(zetasql.type) = TIMESTAMP_MICROS];
  optional sint64 s_seconds_format = 208
      [(zetasql.format) = TIMESTAMP_SECONDS];
  optional sint64 s_millis_format = 209 [(zetasql.format) = TIMESTAMP_MILLIS];
  optional sint64 s_micros_format = 210 [(zetasql.format) = TIMESTAMP_MICROS];

  optional sfixed32 f_date = 301 [(zetasql.format) = DATE];
  optional sfixed64 f_date_64 = 302 [(zetasql.type) = DATE];
  optional sfixed32 f_date_decimal = 303 [(zetasql.type) = DATE_DECIMAL];
  optional sfixed64 f_date_decimal_64 = 304 [(zetasql.format) = DATE_DECIMAL];
  optional sfixed64 f_seconds = 305 [(zetasql.type) = TIMESTAMP_SECONDS];
  optional sfixed64 f_millis = 306 [(zetasql.type) = TIMESTAMP_MILLIS];
  optional sfixed64 f_micros = 307 [(zetasql.type) = TIMESTAMP_MICROS];
  //  optional fixed64 f_micros_u64 = 308 [(zetasql.format) =
  //  TIMESTAMP_MICROS];
  optional sfixed64 f_seconds_format = 309
      [(zetasql.format) = TIMESTAMP_SECONDS];
  optional sfixed64 f_millis_format = 310
      [(zetasql.format) = TIMESTAMP_MILLIS];
  optional sfixed64 f_micros_format = 311
      [(zetasql.format) = TIMESTAMP_MICROS];

  repeated int32 repeated_date = 401 [(zetasql.type) = DATE];
  repeated int64 repeated_date_64 = 402 [(zetasql.type) = DATE];
  repeated int32 repeated_date_decimal = 403 [(zetasql.type) = DATE_DECIMAL];
  repeated int64 repeated_date_decimal_64 = 404
      [(zetasql.format) = DATE_DECIMAL];
  repeated int64 repeated_seconds = 405 [(zetasql.type) = TIMESTAMP_SECONDS];
  repeated int64 repeated_millis = 406 [(zetasql.type) = TIMESTAMP_MILLIS];
  repeated int64 repeated_micros = 407 [(zetasql.type) = TIMESTAMP_MICROS];
  repeated int64 repeated_seconds_format = 409
      [(zetasql.format) = TIMESTAMP_SECONDS];
  repeated int64 repeated_millis_format = 410
      [(zetasql.format) = TIMESTAMP_MILLIS];
  repeated int64 repeated_micros_format = 411
      [(zetasql.format) = TIMESTAMP_MICROS];
  repeated uint64 repeated_micros_u64 = 408
      [(zetasql.format) = TIMESTAMP_MICROS];

  repeated sint32 repeated_s_date = 501 [(zetasql.format) = DATE];
  repeated sint64 repeated_s_date_64 = 502 [(zetasql.type) = DATE];
  repeated sint32 repeated_s_date_decimal = 503
      [(zetasql.type) = DATE_DECIMAL];
  repeated sint64 repeated_s_date_decimal_64 = 504
      [(zetasql.format) = DATE_DECIMAL];
  repeated sint64 repeated_s_seconds = 505
      [(zetasql.type) = TIMESTAMP_SECONDS];
  repeated sint64 repeated_s_millis = 506 [(zetasql.type) = TIMESTAMP_MILLIS];
  repeated sint64 repeated_s_micros = 507 [(zetasql.type) = TIMESTAMP_MICROS];
  repeated sint64 repeated_s_seconds_format = 508
      [(zetasql.format) = TIMESTAMP_SECONDS];
  repeated sint64 repeated_s_millis_format = 509
      [(zetasql.format) = TIMESTAMP_MILLIS];
  repeated sint64 repeated_s_micros_format = 510
      [(zetasql.format) = TIMESTAMP_MICROS];

  repeated sfixed32 repeated_f_date = 601 [(zetasql.format) = DATE];
  repeated sfixed64 repeated_f_date_64 = 602 [(zetasql.type) = DATE];
  repeated sfixed32 repeated_f_date_decimal = 603
      [(zetasql.type) = DATE_DECIMAL];
  repeated sfixed64 repeated_f_date_decimal_64 = 604
      [(zetasql.format) = DATE_DECIMAL];
  repeated sfixed64 repeated_f_seconds = 605
      [(zetasql.type) = TIMESTAMP_SECONDS];
  repeated sfixed64 repeated_f_millis = 606
      [(zetasql.type) = TIMESTAMP_MILLIS];
  repeated sfixed64 repeated_f_micros = 607
      [(zetasql.type) = TIMESTAMP_MICROS];
  //  repeated fixed64 repeated_f_micros_u64 = 608
  //      [(zetasql.format) = TIMESTAMP_MICROS];
  repeated sfixed64 repeated_f_seconds_format = 609
      [(zetasql.format) = TIMESTAMP_SECONDS];
  repeated sfixed64 repeated_f_millis_format = 610
      [(zetasql.format) = TIMESTAMP_MILLIS];
  repeated sfixed64 repeated_f_micros_format = 611
      [(zetasql.format) = TIMESTAMP_MICROS];

  optional int32 date_default = 701
      [default = 16506, (zetasql.format) = DATE];
  optional int64 date_64_default = 702
      [default = 16507, (zetasql.type) = DATE];
  optional int32 date_decimal_default = 703
      [default = 20150312, (zetasql.type) = DATE_DECIMAL];
  optional int64 date_decimal_64_default = 704
      [default = 20150313, (zetasql.format) = DATE_DECIMAL];
  optional int64 seconds_default = 705
      [default = 1426182587, (zetasql.type) = TIMESTAMP_SECONDS];
  optional int64 millis_default = 706
      [default = 1426182587555, (zetasql.type) = TIMESTAMP_MILLIS];
  optional int64 micros_default = 707
      [default = 1426182587555666, (zetasql.type) = TIMESTAMP_MICROS];
  optional int64 seconds_default_format = 709
      [default = 1426182587, (zetasql.format) = TIMESTAMP_SECONDS];
  optional int64 millis_default_format = 710
      [default = 1426182587555, (zetasql.format) = TIMESTAMP_MILLIS];
  optional int64 micros_default_format = 711
      [default = 1426182587555666, (zetasql.format) = TIMESTAMP_MICROS];
  optional uint64 micros_u64_default = 708
      [default = 1426182587555777, (zetasql.format) = TIMESTAMP_MICROS];

  optional sint32 s_date_default = 801
      [default = 16508, (zetasql.format) = DATE];
  optional sint64 s_date_64_default = 802
      [default = 16509, (zetasql.type) = DATE];
  optional sint32 s_date_decimal_default = 803
      [default = 20150314, (zetasql.type) = DATE_DECIMAL];
  optional sint64 s_date_decimal_64_default = 804
      [default = 20150315, (zetasql.format) = DATE_DECIMAL];
  optional sint64 s_seconds_default = 805
      [default = 1426268987, (zetasql.type) = TIMESTAMP_SECONDS];
  optional sint64 s_millis_default = 806
      [default = 1426268987555, (zetasql.type) = TIMESTAMP_MILLIS];
  optional sint64 s_micros_default = 807
      [default = 1426268987555666, (zetasql.type) = TIMESTAMP_MICROS];
  optional sint64 s_seconds_default_format = 808
      [default = 1426268987, (zetasql.format) = TIMESTAMP_SECONDS];
  optional sint64 s_millis_default_format = 809
      [default = 1426268987555, (zetasql.format) = TIMESTAMP_MILLIS];
  optional sint64 s_micros_default_format = 810
      [default = 1426268987555666, (zetasql.format) = TIMESTAMP_MICROS];

  optional sfixed32 f_date_default = 901
      [default = 16510, (zetasql.format) = DATE];
  optional sfixed64 f_date_64_default = 902
      [default = 16511, (zetasql.type) = DATE];
  optional sfixed32 f_date_decimal_default = 903
      [default = 20150316, (zetasql.type) = DATE_DECIMAL];
  optional sfixed64 f_date_decimal_64_default = 904
      [default = 20150317, (zetasql.format) = DATE_DECIMAL];
  optional sfixed64 f_seconds_default = 905
      [default = 1426355387, (zetasql.type) = TIMESTAMP_SECONDS];
  optional sfixed64 f_millis_default = 906
      [default = 1426355387555, (zetasql.type) = TIMESTAMP_MILLIS];
  optional sfixed64 f_micros_default = 907
      [default = 1426355387555666, (zetasql.type) = TIMESTAMP_MICROS];
  //  optional fixed64 f_micros_u64_default = 908
  //      [default=1426355387555777,(zetasql.format) = TIMESTAMP_MICROS];
  optional sfixed64 f_seconds_default_format = 909
      [default = 1426355387, (zetasql.format) = TIMESTAMP_SECONDS];
  optional sfixed64 f_millis_default_format = 910
      [default = 1426355387555, (zetasql.format) = TIMESTAMP_MILLIS];
  optional sfixed64 f_micros_default_format = 911
      [default = 1426355387555666, (zetasql.format) = TIMESTAMP_MICROS];

  optional bytes b_geo = 912 [(zetasql.format) = ST_GEOGRAPHY_ENCODED];
  repeated bytes repeated_b_geo = 913
      [(zetasql.format) = ST_GEOGRAPHY_ENCODED];

  optional bytes b_numeric = 914 [(zetasql.format) = NUMERIC];
  repeated bytes repeated_b_numeric = 915 [(zetasql.format) = NUMERIC];

  optional bytes b_bignumeric = 916 [(zetasql.format) = BIGNUMERIC];
  repeated bytes repeated_b_bignumeric = 917 [(zetasql.format) = BIGNUMERIC];

  extensions 1000;
}

extend FieldFormatsProto {
  optional bytes b_numeric_extension = 1000 [(zetasql.format) = NUMERIC];
}

message TestSQLTable {
  option (zetasql.table_type) = SQL_TABLE;
  option (zetasql.is_struct) = true;

  optional int32 f1 = 3;
  optional int32 f2 = 4;
}

message RecursiveMessage {
  optional int64 int64_field = 1;
  optional RecursiveMessage recursive_msg = 2;
}
