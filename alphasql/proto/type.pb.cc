// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: type.proto

#include "type.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace zetasql {
constexpr TypeProto::TypeProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_descriptor_set_()
  , array_type_(nullptr)
  , struct_type_(nullptr)
  , proto_type_(nullptr)
  , enum_type_(nullptr)
  , type_kind_(-1)
{}
struct TypeProtoDefaultTypeInternal {
  constexpr TypeProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TypeProtoDefaultTypeInternal() {}
  union {
    TypeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TypeProtoDefaultTypeInternal _TypeProto_default_instance_;
constexpr ArrayTypeProto::ArrayTypeProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : element_type_(nullptr){}
struct ArrayTypeProtoDefaultTypeInternal {
  constexpr ArrayTypeProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ArrayTypeProtoDefaultTypeInternal() {}
  union {
    ArrayTypeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ArrayTypeProtoDefaultTypeInternal _ArrayTypeProto_default_instance_;
constexpr StructFieldProto::StructFieldProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : field_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , field_type_(nullptr){}
struct StructFieldProtoDefaultTypeInternal {
  constexpr StructFieldProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StructFieldProtoDefaultTypeInternal() {}
  union {
    StructFieldProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StructFieldProtoDefaultTypeInternal _StructFieldProto_default_instance_;
constexpr StructTypeProto::StructTypeProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : field_(){}
struct StructTypeProtoDefaultTypeInternal {
  constexpr StructTypeProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StructTypeProtoDefaultTypeInternal() {}
  union {
    StructTypeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StructTypeProtoDefaultTypeInternal _StructTypeProto_default_instance_;
constexpr ProtoTypeProto::ProtoTypeProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : catalog_name_path_()
  , proto_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , proto_file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_descriptor_set_index_(0){}
struct ProtoTypeProtoDefaultTypeInternal {
  constexpr ProtoTypeProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProtoTypeProtoDefaultTypeInternal() {}
  union {
    ProtoTypeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProtoTypeProtoDefaultTypeInternal _ProtoTypeProto_default_instance_;
constexpr EnumTypeProto::EnumTypeProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : catalog_name_path_()
  , enum_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , enum_file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_descriptor_set_index_(0){}
struct EnumTypeProtoDefaultTypeInternal {
  constexpr EnumTypeProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnumTypeProtoDefaultTypeInternal() {}
  union {
    EnumTypeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnumTypeProtoDefaultTypeInternal _EnumTypeProto_default_instance_;
}  // namespace zetasql
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_type_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_type_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_type_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_type_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::zetasql::TypeProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TypeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zetasql::TypeProto, type_kind_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TypeProto, array_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TypeProto, struct_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TypeProto, proto_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TypeProto, enum_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TypeProto, file_descriptor_set_),
  4,
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ArrayTypeProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ArrayTypeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zetasql::ArrayTypeProto, element_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::StructFieldProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::StructFieldProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zetasql::StructFieldProto, field_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::StructFieldProto, field_type_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::StructTypeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zetasql::StructTypeProto, field_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ProtoTypeProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ProtoTypeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zetasql::ProtoTypeProto, proto_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ProtoTypeProto, proto_file_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ProtoTypeProto, file_descriptor_set_index_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ProtoTypeProto, catalog_name_path_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::EnumTypeProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::EnumTypeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zetasql::EnumTypeProto, enum_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::EnumTypeProto, enum_file_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::EnumTypeProto, file_descriptor_set_index_),
  PROTOBUF_FIELD_OFFSET(::zetasql::EnumTypeProto, catalog_name_path_),
  0,
  1,
  2,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::zetasql::TypeProto)},
  { 17, 23, sizeof(::zetasql::ArrayTypeProto)},
  { 24, 31, sizeof(::zetasql::StructFieldProto)},
  { 33, -1, sizeof(::zetasql::StructTypeProto)},
  { 39, 48, sizeof(::zetasql::ProtoTypeProto)},
  { 52, 61, sizeof(::zetasql::EnumTypeProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_TypeProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ArrayTypeProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_StructFieldProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_StructTypeProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ProtoTypeProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_EnumTypeProto_default_instance_),
};

const char descriptor_table_protodef_type_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ntype.proto\022\007zetasql\032 google/protobuf/d"
  "escriptor.proto\"\246\002\n\tTypeProto\022$\n\ttype_ki"
  "nd\030\001 \001(\0162\021.zetasql.TypeKind\022+\n\narray_typ"
  "e\030\002 \001(\0132\027.zetasql.ArrayTypeProto\022-\n\013stru"
  "ct_type\030\003 \001(\0132\030.zetasql.StructTypeProto\022"
  "+\n\nproto_type\030\004 \001(\0132\027.zetasql.ProtoTypeP"
  "roto\022)\n\tenum_type\030\005 \001(\0132\026.zetasql.EnumTy"
  "peProto\022\?\n\023file_descriptor_set\030\006 \003(\0132\".g"
  "oogle.protobuf.FileDescriptorSet\":\n\016Arra"
  "yTypeProto\022(\n\014element_type\030\001 \001(\0132\022.zetas"
  "ql.TypeProto\"N\n\020StructFieldProto\022\022\n\nfiel"
  "d_name\030\001 \001(\t\022&\n\nfield_type\030\002 \001(\0132\022.zetas"
  "ql.TypeProto\";\n\017StructTypeProto\022(\n\005field"
  "\030\001 \003(\0132\031.zetasql.StructFieldProto\"~\n\016Pro"
  "toTypeProto\022\022\n\nproto_name\030\001 \001(\t\022\027\n\017proto"
  "_file_name\030\002 \001(\t\022$\n\031file_descriptor_set_"
  "index\030\003 \001(\005:\0010\022\031\n\021catalog_name_path\030\004 \003("
  "\t\"{\n\rEnumTypeProto\022\021\n\tenum_name\030\001 \001(\t\022\026\n"
  "\016enum_file_name\030\002 \001(\t\022$\n\031file_descriptor"
  "_set_index\030\003 \001(\005:\0010\022\031\n\021catalog_name_path"
  "\030\004 \003(\t*\357\003\n\010TypeKind\0225\n(__TypeKind__switc"
  "h_must_have_a_default__\020\377\377\377\377\377\377\377\377\377\001\022\020\n\014TY"
  "PE_UNKNOWN\020\000\022\016\n\nTYPE_INT32\020\001\022\016\n\nTYPE_INT"
  "64\020\002\022\017\n\013TYPE_UINT32\020\003\022\017\n\013TYPE_UINT64\020\004\022\r"
  "\n\tTYPE_BOOL\020\005\022\016\n\nTYPE_FLOAT\020\006\022\017\n\013TYPE_DO"
  "UBLE\020\007\022\017\n\013TYPE_STRING\020\010\022\016\n\nTYPE_BYTES\020\t\022"
  "\r\n\tTYPE_DATE\020\n\022\022\n\016TYPE_TIMESTAMP\020\023\022\r\n\tTY"
  "PE_ENUM\020\017\022\016\n\nTYPE_ARRAY\020\020\022\017\n\013TYPE_STRUCT"
  "\020\021\022\016\n\nTYPE_PROTO\020\022\022\r\n\tTYPE_TIME\020\024\022\021\n\rTYP"
  "E_DATETIME\020\025\022\022\n\016TYPE_GEOGRAPHY\020\026\022\020\n\014TYPE"
  "_NUMERIC\020\027\022\023\n\017TYPE_BIGNUMERIC\020\030\022\021\n\rTYPE_"
  "EXTENDED\020\031\022\r\n\tTYPE_JSON\020\032\022\021\n\rTYPE_INTERV"
  "AL\020\033\022\022\n\016TYPE_TOKENLIST\020\034B$\n\022com.google.z"
  "etasqlB\013ZetaSQLType\370\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_type_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_type_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_type_2eproto = {
  false, false, 1342, descriptor_table_protodef_type_2eproto, "type.proto", 
  &descriptor_table_type_2eproto_once, descriptor_table_type_2eproto_deps, 1, 6,
  schemas, file_default_instances, TableStruct_type_2eproto::offsets,
  file_level_metadata_type_2eproto, file_level_enum_descriptors_type_2eproto, file_level_service_descriptors_type_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_type_2eproto_getter() {
  return &descriptor_table_type_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_type_2eproto(&descriptor_table_type_2eproto);
namespace zetasql {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TypeKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_type_2eproto);
  return file_level_enum_descriptors_type_2eproto[0];
}
bool TypeKind_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TypeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TypeProto>()._has_bits_);
  static void set_has_type_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::ArrayTypeProto& array_type(const TypeProto* msg);
  static void set_has_array_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::StructTypeProto& struct_type(const TypeProto* msg);
  static void set_has_struct_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ProtoTypeProto& proto_type(const TypeProto* msg);
  static void set_has_proto_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::EnumTypeProto& enum_type(const TypeProto* msg);
  static void set_has_enum_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ArrayTypeProto&
TypeProto::_Internal::array_type(const TypeProto* msg) {
  return *msg->array_type_;
}
const ::zetasql::StructTypeProto&
TypeProto::_Internal::struct_type(const TypeProto* msg) {
  return *msg->struct_type_;
}
const ::zetasql::ProtoTypeProto&
TypeProto::_Internal::proto_type(const TypeProto* msg) {
  return *msg->proto_type_;
}
const ::zetasql::EnumTypeProto&
TypeProto::_Internal::enum_type(const TypeProto* msg) {
  return *msg->enum_type_;
}
void TypeProto::clear_file_descriptor_set() {
  file_descriptor_set_.Clear();
}
TypeProto::TypeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  file_descriptor_set_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.TypeProto)
}
TypeProto::TypeProto(const TypeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      file_descriptor_set_(from.file_descriptor_set_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_array_type()) {
    array_type_ = new ::zetasql::ArrayTypeProto(*from.array_type_);
  } else {
    array_type_ = nullptr;
  }
  if (from._internal_has_struct_type()) {
    struct_type_ = new ::zetasql::StructTypeProto(*from.struct_type_);
  } else {
    struct_type_ = nullptr;
  }
  if (from._internal_has_proto_type()) {
    proto_type_ = new ::zetasql::ProtoTypeProto(*from.proto_type_);
  } else {
    proto_type_ = nullptr;
  }
  if (from._internal_has_enum_type()) {
    enum_type_ = new ::zetasql::EnumTypeProto(*from.enum_type_);
  } else {
    enum_type_ = nullptr;
  }
  type_kind_ = from.type_kind_;
  // @@protoc_insertion_point(copy_constructor:zetasql.TypeProto)
}

inline void TypeProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&array_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enum_type_) -
    reinterpret_cast<char*>(&array_type_)) + sizeof(enum_type_));
type_kind_ = -1;
}

TypeProto::~TypeProto() {
  // @@protoc_insertion_point(destructor:zetasql.TypeProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TypeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete array_type_;
  if (this != internal_default_instance()) delete struct_type_;
  if (this != internal_default_instance()) delete proto_type_;
  if (this != internal_default_instance()) delete enum_type_;
}

void TypeProto::ArenaDtor(void* object) {
  TypeProto* _this = reinterpret_cast< TypeProto* >(object);
  (void)_this;
}
void TypeProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TypeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TypeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.TypeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_descriptor_set_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(array_type_ != nullptr);
      array_type_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(struct_type_ != nullptr);
      struct_type_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(proto_type_ != nullptr);
      proto_type_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(enum_type_ != nullptr);
      enum_type_->Clear();
    }
    type_kind_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TypeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zetasql.TypeKind type_kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zetasql::TypeKind_IsValid(val))) {
            _internal_set_type_kind(static_cast<::zetasql::TypeKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .zetasql.ArrayTypeProto array_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_array_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .zetasql.StructTypeProto struct_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .zetasql.ProtoTypeProto proto_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_proto_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .zetasql.EnumTypeProto enum_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_enum_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.FileDescriptorSet file_descriptor_set = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_file_descriptor_set(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TypeProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.TypeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zetasql.TypeKind type_kind = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type_kind(), target);
  }

  // optional .zetasql.ArrayTypeProto array_type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::array_type(this), target, stream);
  }

  // optional .zetasql.StructTypeProto struct_type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::struct_type(this), target, stream);
  }

  // optional .zetasql.ProtoTypeProto proto_type = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::proto_type(this), target, stream);
  }

  // optional .zetasql.EnumTypeProto enum_type = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::enum_type(this), target, stream);
  }

  // repeated .google.protobuf.FileDescriptorSet file_descriptor_set = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_file_descriptor_set_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_file_descriptor_set(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.TypeProto)
  return target;
}

size_t TypeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.TypeProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.FileDescriptorSet file_descriptor_set = 6;
  total_size += 1UL * this->_internal_file_descriptor_set_size();
  for (const auto& msg : this->file_descriptor_set_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .zetasql.ArrayTypeProto array_type = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *array_type_);
    }

    // optional .zetasql.StructTypeProto struct_type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *struct_type_);
    }

    // optional .zetasql.ProtoTypeProto proto_type = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *proto_type_);
    }

    // optional .zetasql.EnumTypeProto enum_type = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enum_type_);
    }

    // optional .zetasql.TypeKind type_kind = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type_kind());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TypeProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TypeProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TypeProto::GetClassData() const { return &_class_data_; }

void TypeProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TypeProto *>(to)->MergeFrom(
      static_cast<const TypeProto &>(from));
}


void TypeProto::MergeFrom(const TypeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.TypeProto)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  file_descriptor_set_.MergeFrom(from.file_descriptor_set_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_array_type()->::zetasql::ArrayTypeProto::MergeFrom(from._internal_array_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_struct_type()->::zetasql::StructTypeProto::MergeFrom(from._internal_struct_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_proto_type()->::zetasql::ProtoTypeProto::MergeFrom(from._internal_proto_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_enum_type()->::zetasql::EnumTypeProto::MergeFrom(from._internal_enum_type());
    }
    if (cached_has_bits & 0x00000010u) {
      type_kind_ = from.type_kind_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TypeProto::CopyFrom(const TypeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.TypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeProto::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(file_descriptor_set_)) return false;
  if (_internal_has_array_type()) {
    if (!array_type_->IsInitialized()) return false;
  }
  if (_internal_has_struct_type()) {
    if (!struct_type_->IsInitialized()) return false;
  }
  return true;
}

void TypeProto::InternalSwap(TypeProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_descriptor_set_.InternalSwap(&other->file_descriptor_set_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TypeProto, enum_type_)
      + sizeof(TypeProto::enum_type_)
      - PROTOBUF_FIELD_OFFSET(TypeProto, array_type_)>(
          reinterpret_cast<char*>(&array_type_),
          reinterpret_cast<char*>(&other->array_type_));
  swap(type_kind_, other->type_kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TypeProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[0]);
}

// ===================================================================

class ArrayTypeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ArrayTypeProto>()._has_bits_);
  static const ::zetasql::TypeProto& element_type(const ArrayTypeProto* msg);
  static void set_has_element_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::TypeProto&
ArrayTypeProto::_Internal::element_type(const ArrayTypeProto* msg) {
  return *msg->element_type_;
}
ArrayTypeProto::ArrayTypeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ArrayTypeProto)
}
ArrayTypeProto::ArrayTypeProto(const ArrayTypeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_element_type()) {
    element_type_ = new ::zetasql::TypeProto(*from.element_type_);
  } else {
    element_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ArrayTypeProto)
}

inline void ArrayTypeProto::SharedCtor() {
element_type_ = nullptr;
}

ArrayTypeProto::~ArrayTypeProto() {
  // @@protoc_insertion_point(destructor:zetasql.ArrayTypeProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ArrayTypeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete element_type_;
}

void ArrayTypeProto::ArenaDtor(void* object) {
  ArrayTypeProto* _this = reinterpret_cast< ArrayTypeProto* >(object);
  (void)_this;
}
void ArrayTypeProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArrayTypeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ArrayTypeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ArrayTypeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(element_type_ != nullptr);
    element_type_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArrayTypeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zetasql.TypeProto element_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_element_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArrayTypeProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ArrayTypeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zetasql.TypeProto element_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::element_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ArrayTypeProto)
  return target;
}

size_t ArrayTypeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ArrayTypeProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .zetasql.TypeProto element_type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *element_type_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArrayTypeProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ArrayTypeProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArrayTypeProto::GetClassData() const { return &_class_data_; }

void ArrayTypeProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ArrayTypeProto *>(to)->MergeFrom(
      static_cast<const ArrayTypeProto &>(from));
}


void ArrayTypeProto::MergeFrom(const ArrayTypeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ArrayTypeProto)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_element_type()) {
    _internal_mutable_element_type()->::zetasql::TypeProto::MergeFrom(from._internal_element_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArrayTypeProto::CopyFrom(const ArrayTypeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ArrayTypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayTypeProto::IsInitialized() const {
  if (_internal_has_element_type()) {
    if (!element_type_->IsInitialized()) return false;
  }
  return true;
}

void ArrayTypeProto::InternalSwap(ArrayTypeProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(element_type_, other->element_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArrayTypeProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[1]);
}

// ===================================================================

class StructFieldProto::_Internal {
 public:
  using HasBits = decltype(std::declval<StructFieldProto>()._has_bits_);
  static void set_has_field_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::TypeProto& field_type(const StructFieldProto* msg);
  static void set_has_field_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::TypeProto&
StructFieldProto::_Internal::field_type(const StructFieldProto* msg) {
  return *msg->field_type_;
}
StructFieldProto::StructFieldProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.StructFieldProto)
}
StructFieldProto::StructFieldProto(const StructFieldProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field_name()) {
    field_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_field_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_field_type()) {
    field_type_ = new ::zetasql::TypeProto(*from.field_type_);
  } else {
    field_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.StructFieldProto)
}

inline void StructFieldProto::SharedCtor() {
field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
field_type_ = nullptr;
}

StructFieldProto::~StructFieldProto() {
  // @@protoc_insertion_point(destructor:zetasql.StructFieldProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StructFieldProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  field_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete field_type_;
}

void StructFieldProto::ArenaDtor(void* object) {
  StructFieldProto* _this = reinterpret_cast< StructFieldProto* >(object);
  (void)_this;
}
void StructFieldProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StructFieldProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StructFieldProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.StructFieldProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      field_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(field_type_ != nullptr);
      field_type_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StructFieldProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string field_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_field_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.StructFieldProto.field_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .zetasql.TypeProto field_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_field_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StructFieldProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.StructFieldProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string field_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field_name().data(), static_cast<int>(this->_internal_field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.StructFieldProto.field_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_field_name(), target);
  }

  // optional .zetasql.TypeProto field_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::field_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.StructFieldProto)
  return target;
}

size_t StructFieldProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.StructFieldProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string field_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field_name());
    }

    // optional .zetasql.TypeProto field_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *field_type_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StructFieldProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StructFieldProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StructFieldProto::GetClassData() const { return &_class_data_; }

void StructFieldProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StructFieldProto *>(to)->MergeFrom(
      static_cast<const StructFieldProto &>(from));
}


void StructFieldProto::MergeFrom(const StructFieldProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.StructFieldProto)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_field_name(from._internal_field_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_field_type()->::zetasql::TypeProto::MergeFrom(from._internal_field_type());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StructFieldProto::CopyFrom(const StructFieldProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.StructFieldProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructFieldProto::IsInitialized() const {
  if (_internal_has_field_type()) {
    if (!field_type_->IsInitialized()) return false;
  }
  return true;
}

void StructFieldProto::InternalSwap(StructFieldProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &field_name_, GetArenaForAllocation(),
      &other->field_name_, other->GetArenaForAllocation()
  );
  swap(field_type_, other->field_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StructFieldProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[2]);
}

// ===================================================================

class StructTypeProto::_Internal {
 public:
};

StructTypeProto::StructTypeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  field_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.StructTypeProto)
}
StructTypeProto::StructTypeProto(const StructTypeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      field_(from.field_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.StructTypeProto)
}

inline void StructTypeProto::SharedCtor() {
}

StructTypeProto::~StructTypeProto() {
  // @@protoc_insertion_point(destructor:zetasql.StructTypeProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StructTypeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StructTypeProto::ArenaDtor(void* object) {
  StructTypeProto* _this = reinterpret_cast< StructTypeProto* >(object);
  (void)_this;
}
void StructTypeProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StructTypeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StructTypeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.StructTypeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StructTypeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .zetasql.StructFieldProto field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StructTypeProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.StructTypeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zetasql.StructFieldProto field = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_field_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_field(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.StructTypeProto)
  return target;
}

size_t StructTypeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.StructTypeProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zetasql.StructFieldProto field = 1;
  total_size += 1UL * this->_internal_field_size();
  for (const auto& msg : this->field_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StructTypeProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StructTypeProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StructTypeProto::GetClassData() const { return &_class_data_; }

void StructTypeProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StructTypeProto *>(to)->MergeFrom(
      static_cast<const StructTypeProto &>(from));
}


void StructTypeProto::MergeFrom(const StructTypeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.StructTypeProto)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StructTypeProto::CopyFrom(const StructTypeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.StructTypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructTypeProto::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(field_)) return false;
  return true;
}

void StructTypeProto::InternalSwap(StructTypeProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  field_.InternalSwap(&other->field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StructTypeProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[3]);
}

// ===================================================================

class ProtoTypeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoTypeProto>()._has_bits_);
  static void set_has_proto_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_proto_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file_descriptor_set_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ProtoTypeProto::ProtoTypeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  catalog_name_path_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ProtoTypeProto)
}
ProtoTypeProto::ProtoTypeProto(const ProtoTypeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      catalog_name_path_(from.catalog_name_path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  proto_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_proto_name()) {
    proto_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proto_name(), 
      GetArenaForAllocation());
  }
  proto_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_proto_file_name()) {
    proto_file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proto_file_name(), 
      GetArenaForAllocation());
  }
  file_descriptor_set_index_ = from.file_descriptor_set_index_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ProtoTypeProto)
}

inline void ProtoTypeProto::SharedCtor() {
proto_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
proto_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_descriptor_set_index_ = 0;
}

ProtoTypeProto::~ProtoTypeProto() {
  // @@protoc_insertion_point(destructor:zetasql.ProtoTypeProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProtoTypeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  proto_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proto_file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtoTypeProto::ArenaDtor(void* object) {
  ProtoTypeProto* _this = reinterpret_cast< ProtoTypeProto* >(object);
  (void)_this;
}
void ProtoTypeProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoTypeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProtoTypeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ProtoTypeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  catalog_name_path_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      proto_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      proto_file_name_.ClearNonDefaultToEmpty();
    }
  }
  file_descriptor_set_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoTypeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string proto_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_proto_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.ProtoTypeProto.proto_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string proto_file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_proto_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.ProtoTypeProto.proto_file_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 file_descriptor_set_index = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_file_descriptor_set_index(&has_bits);
          file_descriptor_set_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string catalog_name_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_catalog_name_path();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.ProtoTypeProto.catalog_name_path");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoTypeProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ProtoTypeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string proto_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_proto_name().data(), static_cast<int>(this->_internal_proto_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.ProtoTypeProto.proto_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_proto_name(), target);
  }

  // optional string proto_file_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_proto_file_name().data(), static_cast<int>(this->_internal_proto_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.ProtoTypeProto.proto_file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_proto_file_name(), target);
  }

  // optional int32 file_descriptor_set_index = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_file_descriptor_set_index(), target);
  }

  // repeated string catalog_name_path = 4;
  for (int i = 0, n = this->_internal_catalog_name_path_size(); i < n; i++) {
    const auto& s = this->_internal_catalog_name_path(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.ProtoTypeProto.catalog_name_path");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ProtoTypeProto)
  return target;
}

size_t ProtoTypeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ProtoTypeProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string catalog_name_path = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(catalog_name_path_.size());
  for (int i = 0, n = catalog_name_path_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      catalog_name_path_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string proto_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_proto_name());
    }

    // optional string proto_file_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_proto_file_name());
    }

    // optional int32 file_descriptor_set_index = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_file_descriptor_set_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtoTypeProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProtoTypeProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtoTypeProto::GetClassData() const { return &_class_data_; }

void ProtoTypeProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProtoTypeProto *>(to)->MergeFrom(
      static_cast<const ProtoTypeProto &>(from));
}


void ProtoTypeProto::MergeFrom(const ProtoTypeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ProtoTypeProto)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  catalog_name_path_.MergeFrom(from.catalog_name_path_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_proto_name(from._internal_proto_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_proto_file_name(from._internal_proto_file_name());
    }
    if (cached_has_bits & 0x00000004u) {
      file_descriptor_set_index_ = from.file_descriptor_set_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtoTypeProto::CopyFrom(const ProtoTypeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ProtoTypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTypeProto::IsInitialized() const {
  return true;
}

void ProtoTypeProto::InternalSwap(ProtoTypeProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  catalog_name_path_.InternalSwap(&other->catalog_name_path_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &proto_name_, GetArenaForAllocation(),
      &other->proto_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &proto_file_name_, GetArenaForAllocation(),
      &other->proto_file_name_, other->GetArenaForAllocation()
  );
  swap(file_descriptor_set_index_, other->file_descriptor_set_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoTypeProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[4]);
}

// ===================================================================

class EnumTypeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<EnumTypeProto>()._has_bits_);
  static void set_has_enum_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enum_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file_descriptor_set_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

EnumTypeProto::EnumTypeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  catalog_name_path_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.EnumTypeProto)
}
EnumTypeProto::EnumTypeProto(const EnumTypeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      catalog_name_path_(from.catalog_name_path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_name()) {
    enum_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_enum_name(), 
      GetArenaForAllocation());
  }
  enum_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_file_name()) {
    enum_file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_enum_file_name(), 
      GetArenaForAllocation());
  }
  file_descriptor_set_index_ = from.file_descriptor_set_index_;
  // @@protoc_insertion_point(copy_constructor:zetasql.EnumTypeProto)
}

inline void EnumTypeProto::SharedCtor() {
enum_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
enum_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_descriptor_set_index_ = 0;
}

EnumTypeProto::~EnumTypeProto() {
  // @@protoc_insertion_point(destructor:zetasql.EnumTypeProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EnumTypeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  enum_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enum_file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnumTypeProto::ArenaDtor(void* object) {
  EnumTypeProto* _this = reinterpret_cast< EnumTypeProto* >(object);
  (void)_this;
}
void EnumTypeProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnumTypeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnumTypeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.EnumTypeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  catalog_name_path_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      enum_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      enum_file_name_.ClearNonDefaultToEmpty();
    }
  }
  file_descriptor_set_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnumTypeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string enum_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.EnumTypeProto.enum_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string enum_file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_enum_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.EnumTypeProto.enum_file_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 file_descriptor_set_index = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_file_descriptor_set_index(&has_bits);
          file_descriptor_set_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string catalog_name_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_catalog_name_path();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.EnumTypeProto.catalog_name_path");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnumTypeProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.EnumTypeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_name().data(), static_cast<int>(this->_internal_enum_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.EnumTypeProto.enum_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_name(), target);
  }

  // optional string enum_file_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_file_name().data(), static_cast<int>(this->_internal_enum_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.EnumTypeProto.enum_file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_enum_file_name(), target);
  }

  // optional int32 file_descriptor_set_index = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_file_descriptor_set_index(), target);
  }

  // repeated string catalog_name_path = 4;
  for (int i = 0, n = this->_internal_catalog_name_path_size(); i < n; i++) {
    const auto& s = this->_internal_catalog_name_path(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.EnumTypeProto.catalog_name_path");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.EnumTypeProto)
  return target;
}

size_t EnumTypeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.EnumTypeProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string catalog_name_path = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(catalog_name_path_.size());
  for (int i = 0, n = catalog_name_path_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      catalog_name_path_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string enum_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_enum_name());
    }

    // optional string enum_file_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_enum_file_name());
    }

    // optional int32 file_descriptor_set_index = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_file_descriptor_set_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnumTypeProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EnumTypeProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnumTypeProto::GetClassData() const { return &_class_data_; }

void EnumTypeProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EnumTypeProto *>(to)->MergeFrom(
      static_cast<const EnumTypeProto &>(from));
}


void EnumTypeProto::MergeFrom(const EnumTypeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.EnumTypeProto)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  catalog_name_path_.MergeFrom(from.catalog_name_path_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_enum_name(from._internal_enum_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_enum_file_name(from._internal_enum_file_name());
    }
    if (cached_has_bits & 0x00000004u) {
      file_descriptor_set_index_ = from.file_descriptor_set_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnumTypeProto::CopyFrom(const EnumTypeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.EnumTypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnumTypeProto::IsInitialized() const {
  return true;
}

void EnumTypeProto::InternalSwap(EnumTypeProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  catalog_name_path_.InternalSwap(&other->catalog_name_path_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &enum_name_, GetArenaForAllocation(),
      &other->enum_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &enum_file_name_, GetArenaForAllocation(),
      &other->enum_file_name_, other->GetArenaForAllocation()
  );
  swap(file_descriptor_set_index_, other->file_descriptor_set_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnumTypeProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_type_2eproto_getter, &descriptor_table_type_2eproto_once,
      file_level_metadata_type_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zetasql::TypeProto* Arena::CreateMaybeMessage< ::zetasql::TypeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::TypeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ArrayTypeProto* Arena::CreateMaybeMessage< ::zetasql::ArrayTypeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ArrayTypeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::StructFieldProto* Arena::CreateMaybeMessage< ::zetasql::StructFieldProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::StructFieldProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::StructTypeProto* Arena::CreateMaybeMessage< ::zetasql::StructTypeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::StructTypeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ProtoTypeProto* Arena::CreateMaybeMessage< ::zetasql::ProtoTypeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ProtoTypeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::EnumTypeProto* Arena::CreateMaybeMessage< ::zetasql::EnumTypeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::EnumTypeProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
