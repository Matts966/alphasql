// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: alphasql_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_alphasql_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_alphasql_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "type.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_alphasql_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_alphasql_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_alphasql_5fservice_2eproto;
class AlphaCheckRequest;
struct AlphaCheckRequestDefaultTypeInternal;
extern AlphaCheckRequestDefaultTypeInternal _AlphaCheckRequest_default_instance_;
class AlphaCheckResponse;
struct AlphaCheckResponseDefaultTypeInternal;
extern AlphaCheckResponseDefaultTypeInternal _AlphaCheckResponse_default_instance_;
class AlphaDAGRequest;
struct AlphaDAGRequestDefaultTypeInternal;
extern AlphaDAGRequestDefaultTypeInternal _AlphaDAGRequest_default_instance_;
class AlphaDAGResponse;
struct AlphaDAGResponseDefaultTypeInternal;
extern AlphaDAGResponseDefaultTypeInternal _AlphaDAGResponse_default_instance_;
class Column;
struct ColumnDefaultTypeInternal;
extern ColumnDefaultTypeInternal _Column_default_instance_;
class File;
struct FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class GenericColumn;
struct GenericColumnDefaultTypeInternal;
extern GenericColumnDefaultTypeInternal _GenericColumn_default_instance_;
class TableSchema;
struct TableSchemaDefaultTypeInternal;
extern TableSchemaDefaultTypeInternal _TableSchema_default_instance_;
class ZetaSQLColumn;
struct ZetaSQLColumnDefaultTypeInternal;
extern ZetaSQLColumnDefaultTypeInternal _ZetaSQLColumn_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AlphaCheckRequest* Arena::CreateMaybeMessage<::AlphaCheckRequest>(Arena*);
template<> ::AlphaCheckResponse* Arena::CreateMaybeMessage<::AlphaCheckResponse>(Arena*);
template<> ::AlphaDAGRequest* Arena::CreateMaybeMessage<::AlphaDAGRequest>(Arena*);
template<> ::AlphaDAGResponse* Arena::CreateMaybeMessage<::AlphaDAGResponse>(Arena*);
template<> ::Column* Arena::CreateMaybeMessage<::Column>(Arena*);
template<> ::File* Arena::CreateMaybeMessage<::File>(Arena*);
template<> ::GenericColumn* Arena::CreateMaybeMessage<::GenericColumn>(Arena*);
template<> ::TableSchema* Arena::CreateMaybeMessage<::TableSchema>(Arena*);
template<> ::ZetaSQLColumn* Arena::CreateMaybeMessage<::ZetaSQLColumn>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum SupportedType : int {
  STRING = 0,
  INTEGER = 1,
  INT64 = 2,
  BOOLEAN = 3,
  BOOL = 4,
  FLOAT64 = 5,
  FLOAT = 6,
  NUMERIC = 7,
  BYTES = 8,
  TIMESTAMP = 9,
  TIME = 10,
  DATETIME = 11,
  DATE = 12,
  GEOGRAPHY = 13,
  RECORD = 14,
  SupportedType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SupportedType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SupportedType_IsValid(int value);
constexpr SupportedType SupportedType_MIN = STRING;
constexpr SupportedType SupportedType_MAX = RECORD;
constexpr int SupportedType_ARRAYSIZE = SupportedType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SupportedType_descriptor();
template<typename T>
inline const std::string& SupportedType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SupportedType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SupportedType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SupportedType_descriptor(), enum_t_value);
}
inline bool SupportedType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SupportedType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SupportedType>(
    SupportedType_descriptor(), name, value);
}
enum Mode : int {
  REPEATED = 0,
  NULLABLE = 1,
  REQUIRED = 2,
  Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Mode_IsValid(int value);
constexpr Mode Mode_MIN = REPEATED;
constexpr Mode Mode_MAX = REQUIRED;
constexpr int Mode_ARRAYSIZE = Mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Mode_descriptor();
template<typename T>
inline const std::string& Mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Mode_descriptor(), enum_t_value);
}
inline bool Mode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Mode>(
    Mode_descriptor(), name, value);
}
// ===================================================================

class File final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:File) */ {
 public:
  inline File() : File(nullptr) {}
  ~File() override;
  explicit constexpr File(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  File(const File& from);
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  inline File& operator=(File&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const File& default_instance() {
    return *internal_default_instance();
  }
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }
  inline void Swap(File* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(File* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline File* New() const final {
    return new File();
  }

  File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<File>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const File& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const File& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(File* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "File";
  }
  protected:
  explicit File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kContentFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_MUST_USE_RESULT std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:File)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alphasql_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AlphaDAGRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AlphaDAGRequest) */ {
 public:
  inline AlphaDAGRequest() : AlphaDAGRequest(nullptr) {}
  ~AlphaDAGRequest() override;
  explicit constexpr AlphaDAGRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlphaDAGRequest(const AlphaDAGRequest& from);
  AlphaDAGRequest(AlphaDAGRequest&& from) noexcept
    : AlphaDAGRequest() {
    *this = ::std::move(from);
  }

  inline AlphaDAGRequest& operator=(const AlphaDAGRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlphaDAGRequest& operator=(AlphaDAGRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlphaDAGRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlphaDAGRequest* internal_default_instance() {
    return reinterpret_cast<const AlphaDAGRequest*>(
               &_AlphaDAGRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AlphaDAGRequest& a, AlphaDAGRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AlphaDAGRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlphaDAGRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlphaDAGRequest* New() const final {
    return new AlphaDAGRequest();
  }

  AlphaDAGRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlphaDAGRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlphaDAGRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AlphaDAGRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlphaDAGRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AlphaDAGRequest";
  }
  protected:
  explicit AlphaDAGRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 5,
    kWarningAsErrorFieldNumber = 1,
    kWithTablesFieldNumber = 2,
    kWithFunctionsFieldNumber = 3,
    kSideEffectFirstFieldNumber = 4,
  };
  // repeated .File files = 5;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::File* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::File >*
      mutable_files();
  private:
  const ::File& _internal_files(int index) const;
  ::File* _internal_add_files();
  public:
  const ::File& files(int index) const;
  ::File* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::File >&
      files() const;

  // bool warning_as_error = 1;
  void clear_warning_as_error();
  bool warning_as_error() const;
  void set_warning_as_error(bool value);
  private:
  bool _internal_warning_as_error() const;
  void _internal_set_warning_as_error(bool value);
  public:

  // bool with_tables = 2;
  void clear_with_tables();
  bool with_tables() const;
  void set_with_tables(bool value);
  private:
  bool _internal_with_tables() const;
  void _internal_set_with_tables(bool value);
  public:

  // bool with_functions = 3;
  void clear_with_functions();
  bool with_functions() const;
  void set_with_functions(bool value);
  private:
  bool _internal_with_functions() const;
  void _internal_set_with_functions(bool value);
  public:

  // bool side_effect_first = 4;
  void clear_side_effect_first();
  bool side_effect_first() const;
  void set_side_effect_first(bool value);
  private:
  bool _internal_side_effect_first() const;
  void _internal_set_side_effect_first(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AlphaDAGRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::File > files_;
  bool warning_as_error_;
  bool with_tables_;
  bool with_functions_;
  bool side_effect_first_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alphasql_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AlphaDAGResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AlphaDAGResponse) */ {
 public:
  inline AlphaDAGResponse() : AlphaDAGResponse(nullptr) {}
  ~AlphaDAGResponse() override;
  explicit constexpr AlphaDAGResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlphaDAGResponse(const AlphaDAGResponse& from);
  AlphaDAGResponse(AlphaDAGResponse&& from) noexcept
    : AlphaDAGResponse() {
    *this = ::std::move(from);
  }

  inline AlphaDAGResponse& operator=(const AlphaDAGResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlphaDAGResponse& operator=(AlphaDAGResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlphaDAGResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlphaDAGResponse* internal_default_instance() {
    return reinterpret_cast<const AlphaDAGResponse*>(
               &_AlphaDAGResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AlphaDAGResponse& a, AlphaDAGResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AlphaDAGResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlphaDAGResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlphaDAGResponse* New() const final {
    return new AlphaDAGResponse();
  }

  AlphaDAGResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlphaDAGResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlphaDAGResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AlphaDAGResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlphaDAGResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AlphaDAGResponse";
  }
  protected:
  explicit AlphaDAGResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExternalRequiredTablesFieldNumber = 1,
    kDagDotStringFieldNumber = 2,
    kErrorFieldNumber = 3,
  };
  // repeated string external_required_tables = 1;
  int external_required_tables_size() const;
  private:
  int _internal_external_required_tables_size() const;
  public:
  void clear_external_required_tables();
  const std::string& external_required_tables(int index) const;
  std::string* mutable_external_required_tables(int index);
  void set_external_required_tables(int index, const std::string& value);
  void set_external_required_tables(int index, std::string&& value);
  void set_external_required_tables(int index, const char* value);
  void set_external_required_tables(int index, const char* value, size_t size);
  std::string* add_external_required_tables();
  void add_external_required_tables(const std::string& value);
  void add_external_required_tables(std::string&& value);
  void add_external_required_tables(const char* value);
  void add_external_required_tables(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& external_required_tables() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_external_required_tables();
  private:
  const std::string& _internal_external_required_tables(int index) const;
  std::string* _internal_add_external_required_tables();
  public:

  // repeated string dag_dot_string = 2;
  int dag_dot_string_size() const;
  private:
  int _internal_dag_dot_string_size() const;
  public:
  void clear_dag_dot_string();
  const std::string& dag_dot_string(int index) const;
  std::string* mutable_dag_dot_string(int index);
  void set_dag_dot_string(int index, const std::string& value);
  void set_dag_dot_string(int index, std::string&& value);
  void set_dag_dot_string(int index, const char* value);
  void set_dag_dot_string(int index, const char* value, size_t size);
  std::string* add_dag_dot_string();
  void add_dag_dot_string(const std::string& value);
  void add_dag_dot_string(std::string&& value);
  void add_dag_dot_string(const char* value);
  void add_dag_dot_string(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dag_dot_string() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dag_dot_string();
  private:
  const std::string& _internal_dag_dot_string(int index) const;
  std::string* _internal_add_dag_dot_string();
  public:

  // optional string error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:AlphaDAGResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> external_required_tables_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dag_dot_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  friend struct ::TableStruct_alphasql_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Column final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Column) */ {
 public:
  inline Column() : Column(nullptr) {}
  ~Column() override;
  explicit constexpr Column(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Column(const Column& from);
  Column(Column&& from) noexcept
    : Column() {
    *this = ::std::move(from);
  }

  inline Column& operator=(const Column& from) {
    CopyFrom(from);
    return *this;
  }
  inline Column& operator=(Column&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Column& default_instance() {
    return *internal_default_instance();
  }
  static inline const Column* internal_default_instance() {
    return reinterpret_cast<const Column*>(
               &_Column_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Column& a, Column& b) {
    a.Swap(&b);
  }
  inline void Swap(Column* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Column* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Column* New() const final {
    return new Column();
  }

  Column* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Column>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Column& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Column& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Column* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Column";
  }
  protected:
  explicit Column(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 4,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kModeFieldNumber = 3,
  };
  // repeated .Column fields = 4;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::Column* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Column >*
      mutable_fields();
  private:
  const ::Column& _internal_fields(int index) const;
  ::Column* _internal_add_fields();
  public:
  const ::Column& fields(int index) const;
  ::Column* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Column >&
      fields() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .SupportedType type = 2;
  void clear_type();
  ::SupportedType type() const;
  void set_type(::SupportedType value);
  private:
  ::SupportedType _internal_type() const;
  void _internal_set_type(::SupportedType value);
  public:

  // .Mode mode = 3;
  void clear_mode();
  ::Mode mode() const;
  void set_mode(::Mode value);
  private:
  ::Mode _internal_mode() const;
  void _internal_set_mode(::Mode value);
  public:

  // @@protoc_insertion_point(class_scope:Column)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Column > fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int type_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alphasql_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ZetaSQLColumn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZetaSQLColumn) */ {
 public:
  inline ZetaSQLColumn() : ZetaSQLColumn(nullptr) {}
  ~ZetaSQLColumn() override;
  explicit constexpr ZetaSQLColumn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZetaSQLColumn(const ZetaSQLColumn& from);
  ZetaSQLColumn(ZetaSQLColumn&& from) noexcept
    : ZetaSQLColumn() {
    *this = ::std::move(from);
  }

  inline ZetaSQLColumn& operator=(const ZetaSQLColumn& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZetaSQLColumn& operator=(ZetaSQLColumn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZetaSQLColumn& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZetaSQLColumn* internal_default_instance() {
    return reinterpret_cast<const ZetaSQLColumn*>(
               &_ZetaSQLColumn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ZetaSQLColumn& a, ZetaSQLColumn& b) {
    a.Swap(&b);
  }
  inline void Swap(ZetaSQLColumn* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZetaSQLColumn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ZetaSQLColumn* New() const final {
    return new ZetaSQLColumn();
  }

  ZetaSQLColumn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ZetaSQLColumn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZetaSQLColumn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ZetaSQLColumn& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZetaSQLColumn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZetaSQLColumn";
  }
  protected:
  explicit ZetaSQLColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kZetasqlTypeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .zetasql.TypeProto zetasql_type = 2;
  bool has_zetasql_type() const;
  private:
  bool _internal_has_zetasql_type() const;
  public:
  void clear_zetasql_type();
  const ::zetasql::TypeProto& zetasql_type() const;
  PROTOBUF_MUST_USE_RESULT ::zetasql::TypeProto* release_zetasql_type();
  ::zetasql::TypeProto* mutable_zetasql_type();
  void set_allocated_zetasql_type(::zetasql::TypeProto* zetasql_type);
  private:
  const ::zetasql::TypeProto& _internal_zetasql_type() const;
  ::zetasql::TypeProto* _internal_mutable_zetasql_type();
  public:
  void unsafe_arena_set_allocated_zetasql_type(
      ::zetasql::TypeProto* zetasql_type);
  ::zetasql::TypeProto* unsafe_arena_release_zetasql_type();

  // @@protoc_insertion_point(class_scope:ZetaSQLColumn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::zetasql::TypeProto* zetasql_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alphasql_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GenericColumn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GenericColumn) */ {
 public:
  inline GenericColumn() : GenericColumn(nullptr) {}
  ~GenericColumn() override;
  explicit constexpr GenericColumn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenericColumn(const GenericColumn& from);
  GenericColumn(GenericColumn&& from) noexcept
    : GenericColumn() {
    *this = ::std::move(from);
  }

  inline GenericColumn& operator=(const GenericColumn& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericColumn& operator=(GenericColumn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenericColumn& default_instance() {
    return *internal_default_instance();
  }
  enum ColumnCase {
    kColumns = 2,
    kZetasqlColumns = 3,
    COLUMN_NOT_SET = 0,
  };

  static inline const GenericColumn* internal_default_instance() {
    return reinterpret_cast<const GenericColumn*>(
               &_GenericColumn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GenericColumn& a, GenericColumn& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericColumn* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenericColumn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenericColumn* New() const final {
    return new GenericColumn();
  }

  GenericColumn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenericColumn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenericColumn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenericColumn& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericColumn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GenericColumn";
  }
  protected:
  explicit GenericColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnsFieldNumber = 2,
    kZetasqlColumnsFieldNumber = 3,
  };
  // .Column columns = 2;
  bool has_columns() const;
  private:
  bool _internal_has_columns() const;
  public:
  void clear_columns();
  const ::Column& columns() const;
  PROTOBUF_MUST_USE_RESULT ::Column* release_columns();
  ::Column* mutable_columns();
  void set_allocated_columns(::Column* columns);
  private:
  const ::Column& _internal_columns() const;
  ::Column* _internal_mutable_columns();
  public:
  void unsafe_arena_set_allocated_columns(
      ::Column* columns);
  ::Column* unsafe_arena_release_columns();

  // .ZetaSQLColumn zetasql_columns = 3;
  bool has_zetasql_columns() const;
  private:
  bool _internal_has_zetasql_columns() const;
  public:
  void clear_zetasql_columns();
  const ::ZetaSQLColumn& zetasql_columns() const;
  PROTOBUF_MUST_USE_RESULT ::ZetaSQLColumn* release_zetasql_columns();
  ::ZetaSQLColumn* mutable_zetasql_columns();
  void set_allocated_zetasql_columns(::ZetaSQLColumn* zetasql_columns);
  private:
  const ::ZetaSQLColumn& _internal_zetasql_columns() const;
  ::ZetaSQLColumn* _internal_mutable_zetasql_columns();
  public:
  void unsafe_arena_set_allocated_zetasql_columns(
      ::ZetaSQLColumn* zetasql_columns);
  ::ZetaSQLColumn* unsafe_arena_release_zetasql_columns();

  void clear_column();
  ColumnCase column_case() const;
  // @@protoc_insertion_point(class_scope:GenericColumn)
 private:
  class _Internal;
  void set_has_columns();
  void set_has_zetasql_columns();

  inline bool has_column() const;
  inline void clear_has_column();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ColumnUnion {
    constexpr ColumnUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::Column* columns_;
    ::ZetaSQLColumn* zetasql_columns_;
  } column_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_alphasql_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TableSchema final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TableSchema) */ {
 public:
  inline TableSchema() : TableSchema(nullptr) {}
  ~TableSchema() override;
  explicit constexpr TableSchema(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableSchema(const TableSchema& from);
  TableSchema(TableSchema&& from) noexcept
    : TableSchema() {
    *this = ::std::move(from);
  }

  inline TableSchema& operator=(const TableSchema& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableSchema& operator=(TableSchema&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableSchema& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableSchema* internal_default_instance() {
    return reinterpret_cast<const TableSchema*>(
               &_TableSchema_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TableSchema& a, TableSchema& b) {
    a.Swap(&b);
  }
  inline void Swap(TableSchema* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableSchema* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableSchema* New() const final {
    return new TableSchema();
  }

  TableSchema* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableSchema>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableSchema& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TableSchema& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableSchema* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TableSchema";
  }
  protected:
  explicit TableSchema(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnsFieldNumber = 2,
    kTableNameFieldNumber = 1,
  };
  // repeated .GenericColumn columns = 2;
  int columns_size() const;
  private:
  int _internal_columns_size() const;
  public:
  void clear_columns();
  ::GenericColumn* mutable_columns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GenericColumn >*
      mutable_columns();
  private:
  const ::GenericColumn& _internal_columns(int index) const;
  ::GenericColumn* _internal_add_columns();
  public:
  const ::GenericColumn& columns(int index) const;
  ::GenericColumn* add_columns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GenericColumn >&
      columns() const;

  // string table_name = 1;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // @@protoc_insertion_point(class_scope:TableSchema)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GenericColumn > columns_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alphasql_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AlphaCheckRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AlphaCheckRequest) */ {
 public:
  inline AlphaCheckRequest() : AlphaCheckRequest(nullptr) {}
  ~AlphaCheckRequest() override;
  explicit constexpr AlphaCheckRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlphaCheckRequest(const AlphaCheckRequest& from);
  AlphaCheckRequest(AlphaCheckRequest&& from) noexcept
    : AlphaCheckRequest() {
    *this = ::std::move(from);
  }

  inline AlphaCheckRequest& operator=(const AlphaCheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlphaCheckRequest& operator=(AlphaCheckRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlphaCheckRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlphaCheckRequest* internal_default_instance() {
    return reinterpret_cast<const AlphaCheckRequest*>(
               &_AlphaCheckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AlphaCheckRequest& a, AlphaCheckRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AlphaCheckRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlphaCheckRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlphaCheckRequest* New() const final {
    return new AlphaCheckRequest();
  }

  AlphaCheckRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlphaCheckRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlphaCheckRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AlphaCheckRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlphaCheckRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AlphaCheckRequest";
  }
  protected:
  explicit AlphaCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExternalRequiredTablesSchemaFieldNumber = 1,
    kFilesFieldNumber = 3,
    kDagDotStringFieldNumber = 2,
  };
  // repeated .TableSchema external_required_tables_schema = 1;
  int external_required_tables_schema_size() const;
  private:
  int _internal_external_required_tables_schema_size() const;
  public:
  void clear_external_required_tables_schema();
  ::TableSchema* mutable_external_required_tables_schema(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TableSchema >*
      mutable_external_required_tables_schema();
  private:
  const ::TableSchema& _internal_external_required_tables_schema(int index) const;
  ::TableSchema* _internal_add_external_required_tables_schema();
  public:
  const ::TableSchema& external_required_tables_schema(int index) const;
  ::TableSchema* add_external_required_tables_schema();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TableSchema >&
      external_required_tables_schema() const;

  // repeated .File files = 3;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::File* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::File >*
      mutable_files();
  private:
  const ::File& _internal_files(int index) const;
  ::File* _internal_add_files();
  public:
  const ::File& files(int index) const;
  ::File* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::File >&
      files() const;

  // string dag_dot_string = 2;
  void clear_dag_dot_string();
  const std::string& dag_dot_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dag_dot_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dag_dot_string();
  PROTOBUF_MUST_USE_RESULT std::string* release_dag_dot_string();
  void set_allocated_dag_dot_string(std::string* dag_dot_string);
  private:
  const std::string& _internal_dag_dot_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dag_dot_string(const std::string& value);
  std::string* _internal_mutable_dag_dot_string();
  public:

  // @@protoc_insertion_point(class_scope:AlphaCheckRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TableSchema > external_required_tables_schema_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::File > files_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dag_dot_string_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alphasql_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AlphaCheckResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AlphaCheckResponse) */ {
 public:
  inline AlphaCheckResponse() : AlphaCheckResponse(nullptr) {}
  ~AlphaCheckResponse() override;
  explicit constexpr AlphaCheckResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlphaCheckResponse(const AlphaCheckResponse& from);
  AlphaCheckResponse(AlphaCheckResponse&& from) noexcept
    : AlphaCheckResponse() {
    *this = ::std::move(from);
  }

  inline AlphaCheckResponse& operator=(const AlphaCheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlphaCheckResponse& operator=(AlphaCheckResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlphaCheckResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlphaCheckResponse* internal_default_instance() {
    return reinterpret_cast<const AlphaCheckResponse*>(
               &_AlphaCheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AlphaCheckResponse& a, AlphaCheckResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AlphaCheckResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlphaCheckResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlphaCheckResponse* New() const final {
    return new AlphaCheckResponse();
  }

  AlphaCheckResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlphaCheckResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlphaCheckResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AlphaCheckResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlphaCheckResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AlphaCheckResponse";
  }
  protected:
  explicit AlphaCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // optional string error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:AlphaCheckResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  friend struct ::TableStruct_alphasql_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// File

// string name = 1;
inline void File::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& File::name() const {
  // @@protoc_insertion_point(field_get:File.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void File::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:File.name)
}
inline std::string* File::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:File.name)
  return _s;
}
inline const std::string& File::_internal_name() const {
  return name_.Get();
}
inline void File::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* File::release_name() {
  // @@protoc_insertion_point(field_release:File.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void File::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:File.name)
}

// string content = 2;
inline void File::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& File::content() const {
  // @@protoc_insertion_point(field_get:File.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void File::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:File.content)
}
inline std::string* File::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:File.content)
  return _s;
}
inline const std::string& File::_internal_content() const {
  return content_.Get();
}
inline void File::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* File::release_content() {
  // @@protoc_insertion_point(field_release:File.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void File::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:File.content)
}

// -------------------------------------------------------------------

// AlphaDAGRequest

// bool warning_as_error = 1;
inline void AlphaDAGRequest::clear_warning_as_error() {
  warning_as_error_ = false;
}
inline bool AlphaDAGRequest::_internal_warning_as_error() const {
  return warning_as_error_;
}
inline bool AlphaDAGRequest::warning_as_error() const {
  // @@protoc_insertion_point(field_get:AlphaDAGRequest.warning_as_error)
  return _internal_warning_as_error();
}
inline void AlphaDAGRequest::_internal_set_warning_as_error(bool value) {
  
  warning_as_error_ = value;
}
inline void AlphaDAGRequest::set_warning_as_error(bool value) {
  _internal_set_warning_as_error(value);
  // @@protoc_insertion_point(field_set:AlphaDAGRequest.warning_as_error)
}

// bool with_tables = 2;
inline void AlphaDAGRequest::clear_with_tables() {
  with_tables_ = false;
}
inline bool AlphaDAGRequest::_internal_with_tables() const {
  return with_tables_;
}
inline bool AlphaDAGRequest::with_tables() const {
  // @@protoc_insertion_point(field_get:AlphaDAGRequest.with_tables)
  return _internal_with_tables();
}
inline void AlphaDAGRequest::_internal_set_with_tables(bool value) {
  
  with_tables_ = value;
}
inline void AlphaDAGRequest::set_with_tables(bool value) {
  _internal_set_with_tables(value);
  // @@protoc_insertion_point(field_set:AlphaDAGRequest.with_tables)
}

// bool with_functions = 3;
inline void AlphaDAGRequest::clear_with_functions() {
  with_functions_ = false;
}
inline bool AlphaDAGRequest::_internal_with_functions() const {
  return with_functions_;
}
inline bool AlphaDAGRequest::with_functions() const {
  // @@protoc_insertion_point(field_get:AlphaDAGRequest.with_functions)
  return _internal_with_functions();
}
inline void AlphaDAGRequest::_internal_set_with_functions(bool value) {
  
  with_functions_ = value;
}
inline void AlphaDAGRequest::set_with_functions(bool value) {
  _internal_set_with_functions(value);
  // @@protoc_insertion_point(field_set:AlphaDAGRequest.with_functions)
}

// bool side_effect_first = 4;
inline void AlphaDAGRequest::clear_side_effect_first() {
  side_effect_first_ = false;
}
inline bool AlphaDAGRequest::_internal_side_effect_first() const {
  return side_effect_first_;
}
inline bool AlphaDAGRequest::side_effect_first() const {
  // @@protoc_insertion_point(field_get:AlphaDAGRequest.side_effect_first)
  return _internal_side_effect_first();
}
inline void AlphaDAGRequest::_internal_set_side_effect_first(bool value) {
  
  side_effect_first_ = value;
}
inline void AlphaDAGRequest::set_side_effect_first(bool value) {
  _internal_set_side_effect_first(value);
  // @@protoc_insertion_point(field_set:AlphaDAGRequest.side_effect_first)
}

// repeated .File files = 5;
inline int AlphaDAGRequest::_internal_files_size() const {
  return files_.size();
}
inline int AlphaDAGRequest::files_size() const {
  return _internal_files_size();
}
inline void AlphaDAGRequest::clear_files() {
  files_.Clear();
}
inline ::File* AlphaDAGRequest::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:AlphaDAGRequest.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::File >*
AlphaDAGRequest::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:AlphaDAGRequest.files)
  return &files_;
}
inline const ::File& AlphaDAGRequest::_internal_files(int index) const {
  return files_.Get(index);
}
inline const ::File& AlphaDAGRequest::files(int index) const {
  // @@protoc_insertion_point(field_get:AlphaDAGRequest.files)
  return _internal_files(index);
}
inline ::File* AlphaDAGRequest::_internal_add_files() {
  return files_.Add();
}
inline ::File* AlphaDAGRequest::add_files() {
  ::File* _add = _internal_add_files();
  // @@protoc_insertion_point(field_add:AlphaDAGRequest.files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::File >&
AlphaDAGRequest::files() const {
  // @@protoc_insertion_point(field_list:AlphaDAGRequest.files)
  return files_;
}

// -------------------------------------------------------------------

// AlphaDAGResponse

// repeated string external_required_tables = 1;
inline int AlphaDAGResponse::_internal_external_required_tables_size() const {
  return external_required_tables_.size();
}
inline int AlphaDAGResponse::external_required_tables_size() const {
  return _internal_external_required_tables_size();
}
inline void AlphaDAGResponse::clear_external_required_tables() {
  external_required_tables_.Clear();
}
inline std::string* AlphaDAGResponse::add_external_required_tables() {
  std::string* _s = _internal_add_external_required_tables();
  // @@protoc_insertion_point(field_add_mutable:AlphaDAGResponse.external_required_tables)
  return _s;
}
inline const std::string& AlphaDAGResponse::_internal_external_required_tables(int index) const {
  return external_required_tables_.Get(index);
}
inline const std::string& AlphaDAGResponse::external_required_tables(int index) const {
  // @@protoc_insertion_point(field_get:AlphaDAGResponse.external_required_tables)
  return _internal_external_required_tables(index);
}
inline std::string* AlphaDAGResponse::mutable_external_required_tables(int index) {
  // @@protoc_insertion_point(field_mutable:AlphaDAGResponse.external_required_tables)
  return external_required_tables_.Mutable(index);
}
inline void AlphaDAGResponse::set_external_required_tables(int index, const std::string& value) {
  external_required_tables_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:AlphaDAGResponse.external_required_tables)
}
inline void AlphaDAGResponse::set_external_required_tables(int index, std::string&& value) {
  external_required_tables_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:AlphaDAGResponse.external_required_tables)
}
inline void AlphaDAGResponse::set_external_required_tables(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  external_required_tables_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AlphaDAGResponse.external_required_tables)
}
inline void AlphaDAGResponse::set_external_required_tables(int index, const char* value, size_t size) {
  external_required_tables_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AlphaDAGResponse.external_required_tables)
}
inline std::string* AlphaDAGResponse::_internal_add_external_required_tables() {
  return external_required_tables_.Add();
}
inline void AlphaDAGResponse::add_external_required_tables(const std::string& value) {
  external_required_tables_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AlphaDAGResponse.external_required_tables)
}
inline void AlphaDAGResponse::add_external_required_tables(std::string&& value) {
  external_required_tables_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AlphaDAGResponse.external_required_tables)
}
inline void AlphaDAGResponse::add_external_required_tables(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  external_required_tables_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AlphaDAGResponse.external_required_tables)
}
inline void AlphaDAGResponse::add_external_required_tables(const char* value, size_t size) {
  external_required_tables_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AlphaDAGResponse.external_required_tables)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AlphaDAGResponse::external_required_tables() const {
  // @@protoc_insertion_point(field_list:AlphaDAGResponse.external_required_tables)
  return external_required_tables_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AlphaDAGResponse::mutable_external_required_tables() {
  // @@protoc_insertion_point(field_mutable_list:AlphaDAGResponse.external_required_tables)
  return &external_required_tables_;
}

// repeated string dag_dot_string = 2;
inline int AlphaDAGResponse::_internal_dag_dot_string_size() const {
  return dag_dot_string_.size();
}
inline int AlphaDAGResponse::dag_dot_string_size() const {
  return _internal_dag_dot_string_size();
}
inline void AlphaDAGResponse::clear_dag_dot_string() {
  dag_dot_string_.Clear();
}
inline std::string* AlphaDAGResponse::add_dag_dot_string() {
  std::string* _s = _internal_add_dag_dot_string();
  // @@protoc_insertion_point(field_add_mutable:AlphaDAGResponse.dag_dot_string)
  return _s;
}
inline const std::string& AlphaDAGResponse::_internal_dag_dot_string(int index) const {
  return dag_dot_string_.Get(index);
}
inline const std::string& AlphaDAGResponse::dag_dot_string(int index) const {
  // @@protoc_insertion_point(field_get:AlphaDAGResponse.dag_dot_string)
  return _internal_dag_dot_string(index);
}
inline std::string* AlphaDAGResponse::mutable_dag_dot_string(int index) {
  // @@protoc_insertion_point(field_mutable:AlphaDAGResponse.dag_dot_string)
  return dag_dot_string_.Mutable(index);
}
inline void AlphaDAGResponse::set_dag_dot_string(int index, const std::string& value) {
  dag_dot_string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:AlphaDAGResponse.dag_dot_string)
}
inline void AlphaDAGResponse::set_dag_dot_string(int index, std::string&& value) {
  dag_dot_string_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:AlphaDAGResponse.dag_dot_string)
}
inline void AlphaDAGResponse::set_dag_dot_string(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dag_dot_string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AlphaDAGResponse.dag_dot_string)
}
inline void AlphaDAGResponse::set_dag_dot_string(int index, const char* value, size_t size) {
  dag_dot_string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AlphaDAGResponse.dag_dot_string)
}
inline std::string* AlphaDAGResponse::_internal_add_dag_dot_string() {
  return dag_dot_string_.Add();
}
inline void AlphaDAGResponse::add_dag_dot_string(const std::string& value) {
  dag_dot_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AlphaDAGResponse.dag_dot_string)
}
inline void AlphaDAGResponse::add_dag_dot_string(std::string&& value) {
  dag_dot_string_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AlphaDAGResponse.dag_dot_string)
}
inline void AlphaDAGResponse::add_dag_dot_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dag_dot_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AlphaDAGResponse.dag_dot_string)
}
inline void AlphaDAGResponse::add_dag_dot_string(const char* value, size_t size) {
  dag_dot_string_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AlphaDAGResponse.dag_dot_string)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AlphaDAGResponse::dag_dot_string() const {
  // @@protoc_insertion_point(field_list:AlphaDAGResponse.dag_dot_string)
  return dag_dot_string_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AlphaDAGResponse::mutable_dag_dot_string() {
  // @@protoc_insertion_point(field_mutable_list:AlphaDAGResponse.dag_dot_string)
  return &dag_dot_string_;
}

// optional string error = 3;
inline bool AlphaDAGResponse::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AlphaDAGResponse::has_error() const {
  return _internal_has_error();
}
inline void AlphaDAGResponse::clear_error() {
  error_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AlphaDAGResponse::error() const {
  // @@protoc_insertion_point(field_get:AlphaDAGResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlphaDAGResponse::set_error(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AlphaDAGResponse.error)
}
inline std::string* AlphaDAGResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:AlphaDAGResponse.error)
  return _s;
}
inline const std::string& AlphaDAGResponse::_internal_error() const {
  return error_.Get();
}
inline void AlphaDAGResponse::_internal_set_error(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AlphaDAGResponse::_internal_mutable_error() {
  _has_bits_[0] |= 0x00000001u;
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AlphaDAGResponse::release_error() {
  // @@protoc_insertion_point(field_release:AlphaDAGResponse.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return error_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AlphaDAGResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AlphaDAGResponse.error)
}

// -------------------------------------------------------------------

// Column

// string name = 1;
inline void Column::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Column::name() const {
  // @@protoc_insertion_point(field_get:Column.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Column::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Column.name)
}
inline std::string* Column::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Column.name)
  return _s;
}
inline const std::string& Column::_internal_name() const {
  return name_.Get();
}
inline void Column::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Column::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Column::release_name() {
  // @@protoc_insertion_point(field_release:Column.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Column::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Column.name)
}

// .SupportedType type = 2;
inline void Column::clear_type() {
  type_ = 0;
}
inline ::SupportedType Column::_internal_type() const {
  return static_cast< ::SupportedType >(type_);
}
inline ::SupportedType Column::type() const {
  // @@protoc_insertion_point(field_get:Column.type)
  return _internal_type();
}
inline void Column::_internal_set_type(::SupportedType value) {
  
  type_ = value;
}
inline void Column::set_type(::SupportedType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Column.type)
}

// .Mode mode = 3;
inline void Column::clear_mode() {
  mode_ = 0;
}
inline ::Mode Column::_internal_mode() const {
  return static_cast< ::Mode >(mode_);
}
inline ::Mode Column::mode() const {
  // @@protoc_insertion_point(field_get:Column.mode)
  return _internal_mode();
}
inline void Column::_internal_set_mode(::Mode value) {
  
  mode_ = value;
}
inline void Column::set_mode(::Mode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:Column.mode)
}

// repeated .Column fields = 4;
inline int Column::_internal_fields_size() const {
  return fields_.size();
}
inline int Column::fields_size() const {
  return _internal_fields_size();
}
inline void Column::clear_fields() {
  fields_.Clear();
}
inline ::Column* Column::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:Column.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Column >*
Column::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:Column.fields)
  return &fields_;
}
inline const ::Column& Column::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::Column& Column::fields(int index) const {
  // @@protoc_insertion_point(field_get:Column.fields)
  return _internal_fields(index);
}
inline ::Column* Column::_internal_add_fields() {
  return fields_.Add();
}
inline ::Column* Column::add_fields() {
  ::Column* _add = _internal_add_fields();
  // @@protoc_insertion_point(field_add:Column.fields)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Column >&
Column::fields() const {
  // @@protoc_insertion_point(field_list:Column.fields)
  return fields_;
}

// -------------------------------------------------------------------

// ZetaSQLColumn

// string name = 1;
inline void ZetaSQLColumn::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ZetaSQLColumn::name() const {
  // @@protoc_insertion_point(field_get:ZetaSQLColumn.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZetaSQLColumn::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ZetaSQLColumn.name)
}
inline std::string* ZetaSQLColumn::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ZetaSQLColumn.name)
  return _s;
}
inline const std::string& ZetaSQLColumn::_internal_name() const {
  return name_.Get();
}
inline void ZetaSQLColumn::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ZetaSQLColumn::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ZetaSQLColumn::release_name() {
  // @@protoc_insertion_point(field_release:ZetaSQLColumn.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ZetaSQLColumn::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ZetaSQLColumn.name)
}

// .zetasql.TypeProto zetasql_type = 2;
inline bool ZetaSQLColumn::_internal_has_zetasql_type() const {
  return this != internal_default_instance() && zetasql_type_ != nullptr;
}
inline bool ZetaSQLColumn::has_zetasql_type() const {
  return _internal_has_zetasql_type();
}
inline const ::zetasql::TypeProto& ZetaSQLColumn::_internal_zetasql_type() const {
  const ::zetasql::TypeProto* p = zetasql_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::zetasql::TypeProto&>(
      ::zetasql::_TypeProto_default_instance_);
}
inline const ::zetasql::TypeProto& ZetaSQLColumn::zetasql_type() const {
  // @@protoc_insertion_point(field_get:ZetaSQLColumn.zetasql_type)
  return _internal_zetasql_type();
}
inline void ZetaSQLColumn::unsafe_arena_set_allocated_zetasql_type(
    ::zetasql::TypeProto* zetasql_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(zetasql_type_);
  }
  zetasql_type_ = zetasql_type;
  if (zetasql_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ZetaSQLColumn.zetasql_type)
}
inline ::zetasql::TypeProto* ZetaSQLColumn::release_zetasql_type() {
  
  ::zetasql::TypeProto* temp = zetasql_type_;
  zetasql_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::zetasql::TypeProto* ZetaSQLColumn::unsafe_arena_release_zetasql_type() {
  // @@protoc_insertion_point(field_release:ZetaSQLColumn.zetasql_type)
  
  ::zetasql::TypeProto* temp = zetasql_type_;
  zetasql_type_ = nullptr;
  return temp;
}
inline ::zetasql::TypeProto* ZetaSQLColumn::_internal_mutable_zetasql_type() {
  
  if (zetasql_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasql::TypeProto>(GetArenaForAllocation());
    zetasql_type_ = p;
  }
  return zetasql_type_;
}
inline ::zetasql::TypeProto* ZetaSQLColumn::mutable_zetasql_type() {
  ::zetasql::TypeProto* _msg = _internal_mutable_zetasql_type();
  // @@protoc_insertion_point(field_mutable:ZetaSQLColumn.zetasql_type)
  return _msg;
}
inline void ZetaSQLColumn::set_allocated_zetasql_type(::zetasql::TypeProto* zetasql_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(zetasql_type_);
  }
  if (zetasql_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(zetasql_type));
    if (message_arena != submessage_arena) {
      zetasql_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zetasql_type, submessage_arena);
    }
    
  } else {
    
  }
  zetasql_type_ = zetasql_type;
  // @@protoc_insertion_point(field_set_allocated:ZetaSQLColumn.zetasql_type)
}

// -------------------------------------------------------------------

// GenericColumn

// .Column columns = 2;
inline bool GenericColumn::_internal_has_columns() const {
  return column_case() == kColumns;
}
inline bool GenericColumn::has_columns() const {
  return _internal_has_columns();
}
inline void GenericColumn::set_has_columns() {
  _oneof_case_[0] = kColumns;
}
inline void GenericColumn::clear_columns() {
  if (_internal_has_columns()) {
    if (GetArenaForAllocation() == nullptr) {
      delete column_.columns_;
    }
    clear_has_column();
  }
}
inline ::Column* GenericColumn::release_columns() {
  // @@protoc_insertion_point(field_release:GenericColumn.columns)
  if (_internal_has_columns()) {
    clear_has_column();
      ::Column* temp = column_.columns_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    column_.columns_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Column& GenericColumn::_internal_columns() const {
  return _internal_has_columns()
      ? *column_.columns_
      : reinterpret_cast< ::Column&>(::_Column_default_instance_);
}
inline const ::Column& GenericColumn::columns() const {
  // @@protoc_insertion_point(field_get:GenericColumn.columns)
  return _internal_columns();
}
inline ::Column* GenericColumn::unsafe_arena_release_columns() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GenericColumn.columns)
  if (_internal_has_columns()) {
    clear_has_column();
    ::Column* temp = column_.columns_;
    column_.columns_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GenericColumn::unsafe_arena_set_allocated_columns(::Column* columns) {
  clear_column();
  if (columns) {
    set_has_columns();
    column_.columns_ = columns;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GenericColumn.columns)
}
inline ::Column* GenericColumn::_internal_mutable_columns() {
  if (!_internal_has_columns()) {
    clear_column();
    set_has_columns();
    column_.columns_ = CreateMaybeMessage< ::Column >(GetArenaForAllocation());
  }
  return column_.columns_;
}
inline ::Column* GenericColumn::mutable_columns() {
  ::Column* _msg = _internal_mutable_columns();
  // @@protoc_insertion_point(field_mutable:GenericColumn.columns)
  return _msg;
}

// .ZetaSQLColumn zetasql_columns = 3;
inline bool GenericColumn::_internal_has_zetasql_columns() const {
  return column_case() == kZetasqlColumns;
}
inline bool GenericColumn::has_zetasql_columns() const {
  return _internal_has_zetasql_columns();
}
inline void GenericColumn::set_has_zetasql_columns() {
  _oneof_case_[0] = kZetasqlColumns;
}
inline void GenericColumn::clear_zetasql_columns() {
  if (_internal_has_zetasql_columns()) {
    if (GetArenaForAllocation() == nullptr) {
      delete column_.zetasql_columns_;
    }
    clear_has_column();
  }
}
inline ::ZetaSQLColumn* GenericColumn::release_zetasql_columns() {
  // @@protoc_insertion_point(field_release:GenericColumn.zetasql_columns)
  if (_internal_has_zetasql_columns()) {
    clear_has_column();
      ::ZetaSQLColumn* temp = column_.zetasql_columns_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    column_.zetasql_columns_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ZetaSQLColumn& GenericColumn::_internal_zetasql_columns() const {
  return _internal_has_zetasql_columns()
      ? *column_.zetasql_columns_
      : reinterpret_cast< ::ZetaSQLColumn&>(::_ZetaSQLColumn_default_instance_);
}
inline const ::ZetaSQLColumn& GenericColumn::zetasql_columns() const {
  // @@protoc_insertion_point(field_get:GenericColumn.zetasql_columns)
  return _internal_zetasql_columns();
}
inline ::ZetaSQLColumn* GenericColumn::unsafe_arena_release_zetasql_columns() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GenericColumn.zetasql_columns)
  if (_internal_has_zetasql_columns()) {
    clear_has_column();
    ::ZetaSQLColumn* temp = column_.zetasql_columns_;
    column_.zetasql_columns_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GenericColumn::unsafe_arena_set_allocated_zetasql_columns(::ZetaSQLColumn* zetasql_columns) {
  clear_column();
  if (zetasql_columns) {
    set_has_zetasql_columns();
    column_.zetasql_columns_ = zetasql_columns;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GenericColumn.zetasql_columns)
}
inline ::ZetaSQLColumn* GenericColumn::_internal_mutable_zetasql_columns() {
  if (!_internal_has_zetasql_columns()) {
    clear_column();
    set_has_zetasql_columns();
    column_.zetasql_columns_ = CreateMaybeMessage< ::ZetaSQLColumn >(GetArenaForAllocation());
  }
  return column_.zetasql_columns_;
}
inline ::ZetaSQLColumn* GenericColumn::mutable_zetasql_columns() {
  ::ZetaSQLColumn* _msg = _internal_mutable_zetasql_columns();
  // @@protoc_insertion_point(field_mutable:GenericColumn.zetasql_columns)
  return _msg;
}

inline bool GenericColumn::has_column() const {
  return column_case() != COLUMN_NOT_SET;
}
inline void GenericColumn::clear_has_column() {
  _oneof_case_[0] = COLUMN_NOT_SET;
}
inline GenericColumn::ColumnCase GenericColumn::column_case() const {
  return GenericColumn::ColumnCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TableSchema

// string table_name = 1;
inline void TableSchema::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& TableSchema::table_name() const {
  // @@protoc_insertion_point(field_get:TableSchema.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TableSchema::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TableSchema.table_name)
}
inline std::string* TableSchema::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:TableSchema.table_name)
  return _s;
}
inline const std::string& TableSchema::_internal_table_name() const {
  return table_name_.Get();
}
inline void TableSchema::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TableSchema::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TableSchema::release_table_name() {
  // @@protoc_insertion_point(field_release:TableSchema.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TableSchema::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TableSchema.table_name)
}

// repeated .GenericColumn columns = 2;
inline int TableSchema::_internal_columns_size() const {
  return columns_.size();
}
inline int TableSchema::columns_size() const {
  return _internal_columns_size();
}
inline void TableSchema::clear_columns() {
  columns_.Clear();
}
inline ::GenericColumn* TableSchema::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:TableSchema.columns)
  return columns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GenericColumn >*
TableSchema::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:TableSchema.columns)
  return &columns_;
}
inline const ::GenericColumn& TableSchema::_internal_columns(int index) const {
  return columns_.Get(index);
}
inline const ::GenericColumn& TableSchema::columns(int index) const {
  // @@protoc_insertion_point(field_get:TableSchema.columns)
  return _internal_columns(index);
}
inline ::GenericColumn* TableSchema::_internal_add_columns() {
  return columns_.Add();
}
inline ::GenericColumn* TableSchema::add_columns() {
  ::GenericColumn* _add = _internal_add_columns();
  // @@protoc_insertion_point(field_add:TableSchema.columns)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GenericColumn >&
TableSchema::columns() const {
  // @@protoc_insertion_point(field_list:TableSchema.columns)
  return columns_;
}

// -------------------------------------------------------------------

// AlphaCheckRequest

// repeated .TableSchema external_required_tables_schema = 1;
inline int AlphaCheckRequest::_internal_external_required_tables_schema_size() const {
  return external_required_tables_schema_.size();
}
inline int AlphaCheckRequest::external_required_tables_schema_size() const {
  return _internal_external_required_tables_schema_size();
}
inline void AlphaCheckRequest::clear_external_required_tables_schema() {
  external_required_tables_schema_.Clear();
}
inline ::TableSchema* AlphaCheckRequest::mutable_external_required_tables_schema(int index) {
  // @@protoc_insertion_point(field_mutable:AlphaCheckRequest.external_required_tables_schema)
  return external_required_tables_schema_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TableSchema >*
AlphaCheckRequest::mutable_external_required_tables_schema() {
  // @@protoc_insertion_point(field_mutable_list:AlphaCheckRequest.external_required_tables_schema)
  return &external_required_tables_schema_;
}
inline const ::TableSchema& AlphaCheckRequest::_internal_external_required_tables_schema(int index) const {
  return external_required_tables_schema_.Get(index);
}
inline const ::TableSchema& AlphaCheckRequest::external_required_tables_schema(int index) const {
  // @@protoc_insertion_point(field_get:AlphaCheckRequest.external_required_tables_schema)
  return _internal_external_required_tables_schema(index);
}
inline ::TableSchema* AlphaCheckRequest::_internal_add_external_required_tables_schema() {
  return external_required_tables_schema_.Add();
}
inline ::TableSchema* AlphaCheckRequest::add_external_required_tables_schema() {
  ::TableSchema* _add = _internal_add_external_required_tables_schema();
  // @@protoc_insertion_point(field_add:AlphaCheckRequest.external_required_tables_schema)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TableSchema >&
AlphaCheckRequest::external_required_tables_schema() const {
  // @@protoc_insertion_point(field_list:AlphaCheckRequest.external_required_tables_schema)
  return external_required_tables_schema_;
}

// string dag_dot_string = 2;
inline void AlphaCheckRequest::clear_dag_dot_string() {
  dag_dot_string_.ClearToEmpty();
}
inline const std::string& AlphaCheckRequest::dag_dot_string() const {
  // @@protoc_insertion_point(field_get:AlphaCheckRequest.dag_dot_string)
  return _internal_dag_dot_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlphaCheckRequest::set_dag_dot_string(ArgT0&& arg0, ArgT... args) {
 
 dag_dot_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AlphaCheckRequest.dag_dot_string)
}
inline std::string* AlphaCheckRequest::mutable_dag_dot_string() {
  std::string* _s = _internal_mutable_dag_dot_string();
  // @@protoc_insertion_point(field_mutable:AlphaCheckRequest.dag_dot_string)
  return _s;
}
inline const std::string& AlphaCheckRequest::_internal_dag_dot_string() const {
  return dag_dot_string_.Get();
}
inline void AlphaCheckRequest::_internal_set_dag_dot_string(const std::string& value) {
  
  dag_dot_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AlphaCheckRequest::_internal_mutable_dag_dot_string() {
  
  return dag_dot_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AlphaCheckRequest::release_dag_dot_string() {
  // @@protoc_insertion_point(field_release:AlphaCheckRequest.dag_dot_string)
  return dag_dot_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AlphaCheckRequest::set_allocated_dag_dot_string(std::string* dag_dot_string) {
  if (dag_dot_string != nullptr) {
    
  } else {
    
  }
  dag_dot_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dag_dot_string,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AlphaCheckRequest.dag_dot_string)
}

// repeated .File files = 3;
inline int AlphaCheckRequest::_internal_files_size() const {
  return files_.size();
}
inline int AlphaCheckRequest::files_size() const {
  return _internal_files_size();
}
inline void AlphaCheckRequest::clear_files() {
  files_.Clear();
}
inline ::File* AlphaCheckRequest::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:AlphaCheckRequest.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::File >*
AlphaCheckRequest::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:AlphaCheckRequest.files)
  return &files_;
}
inline const ::File& AlphaCheckRequest::_internal_files(int index) const {
  return files_.Get(index);
}
inline const ::File& AlphaCheckRequest::files(int index) const {
  // @@protoc_insertion_point(field_get:AlphaCheckRequest.files)
  return _internal_files(index);
}
inline ::File* AlphaCheckRequest::_internal_add_files() {
  return files_.Add();
}
inline ::File* AlphaCheckRequest::add_files() {
  ::File* _add = _internal_add_files();
  // @@protoc_insertion_point(field_add:AlphaCheckRequest.files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::File >&
AlphaCheckRequest::files() const {
  // @@protoc_insertion_point(field_list:AlphaCheckRequest.files)
  return files_;
}

// -------------------------------------------------------------------

// AlphaCheckResponse

// optional string error = 1;
inline bool AlphaCheckResponse::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AlphaCheckResponse::has_error() const {
  return _internal_has_error();
}
inline void AlphaCheckResponse::clear_error() {
  error_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AlphaCheckResponse::error() const {
  // @@protoc_insertion_point(field_get:AlphaCheckResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlphaCheckResponse::set_error(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AlphaCheckResponse.error)
}
inline std::string* AlphaCheckResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:AlphaCheckResponse.error)
  return _s;
}
inline const std::string& AlphaCheckResponse::_internal_error() const {
  return error_.Get();
}
inline void AlphaCheckResponse::_internal_set_error(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AlphaCheckResponse::_internal_mutable_error() {
  _has_bits_[0] |= 0x00000001u;
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AlphaCheckResponse::release_error() {
  // @@protoc_insertion_point(field_release:AlphaCheckResponse.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return error_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AlphaCheckResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AlphaCheckResponse.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SupportedType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SupportedType>() {
  return ::SupportedType_descriptor();
}
template <> struct is_proto_enum< ::Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Mode>() {
  return ::Mode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_alphasql_5fservice_2eproto
