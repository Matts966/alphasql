// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: alphasql_service.proto

#include "alphasql_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr File::File(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FileDefaultTypeInternal {
  constexpr FileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FileDefaultTypeInternal() {}
  union {
    File _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FileDefaultTypeInternal _File_default_instance_;
constexpr AlphaDAGRequest::AlphaDAGRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : files_()
  , warning_as_error_(false)
  , with_tables_(false)
  , with_functions_(false)
  , side_effect_first_(false){}
struct AlphaDAGRequestDefaultTypeInternal {
  constexpr AlphaDAGRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AlphaDAGRequestDefaultTypeInternal() {}
  union {
    AlphaDAGRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AlphaDAGRequestDefaultTypeInternal _AlphaDAGRequest_default_instance_;
constexpr AlphaDAGResponse::AlphaDAGResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : external_required_tables_()
  , dag_dot_string_()
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AlphaDAGResponseDefaultTypeInternal {
  constexpr AlphaDAGResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AlphaDAGResponseDefaultTypeInternal() {}
  union {
    AlphaDAGResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AlphaDAGResponseDefaultTypeInternal _AlphaDAGResponse_default_instance_;
constexpr Column::Column(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fields_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , mode_(0)
{}
struct ColumnDefaultTypeInternal {
  constexpr ColumnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColumnDefaultTypeInternal() {}
  union {
    Column _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColumnDefaultTypeInternal _Column_default_instance_;
constexpr ZetaSQLColumn::ZetaSQLColumn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , zetasql_type_(nullptr){}
struct ZetaSQLColumnDefaultTypeInternal {
  constexpr ZetaSQLColumnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ZetaSQLColumnDefaultTypeInternal() {}
  union {
    ZetaSQLColumn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ZetaSQLColumnDefaultTypeInternal _ZetaSQLColumn_default_instance_;
constexpr GenericColumn::GenericColumn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct GenericColumnDefaultTypeInternal {
  constexpr GenericColumnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenericColumnDefaultTypeInternal() {}
  union {
    GenericColumn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenericColumnDefaultTypeInternal _GenericColumn_default_instance_;
constexpr TableSchema::TableSchema(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : columns_()
  , table_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TableSchemaDefaultTypeInternal {
  constexpr TableSchemaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableSchemaDefaultTypeInternal() {}
  union {
    TableSchema _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableSchemaDefaultTypeInternal _TableSchema_default_instance_;
constexpr AlphaCheckRequest::AlphaCheckRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : external_required_tables_schema_()
  , files_()
  , dag_dot_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AlphaCheckRequestDefaultTypeInternal {
  constexpr AlphaCheckRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AlphaCheckRequestDefaultTypeInternal() {}
  union {
    AlphaCheckRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AlphaCheckRequestDefaultTypeInternal _AlphaCheckRequest_default_instance_;
constexpr AlphaCheckResponse::AlphaCheckResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AlphaCheckResponseDefaultTypeInternal {
  constexpr AlphaCheckResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AlphaCheckResponseDefaultTypeInternal() {}
  union {
    AlphaCheckResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AlphaCheckResponseDefaultTypeInternal _AlphaCheckResponse_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_alphasql_5fservice_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_alphasql_5fservice_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_alphasql_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_alphasql_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::File, name_),
  PROTOBUF_FIELD_OFFSET(::File, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AlphaDAGRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AlphaDAGRequest, warning_as_error_),
  PROTOBUF_FIELD_OFFSET(::AlphaDAGRequest, with_tables_),
  PROTOBUF_FIELD_OFFSET(::AlphaDAGRequest, with_functions_),
  PROTOBUF_FIELD_OFFSET(::AlphaDAGRequest, side_effect_first_),
  PROTOBUF_FIELD_OFFSET(::AlphaDAGRequest, files_),
  PROTOBUF_FIELD_OFFSET(::AlphaDAGResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AlphaDAGResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AlphaDAGResponse, external_required_tables_),
  PROTOBUF_FIELD_OFFSET(::AlphaDAGResponse, dag_dot_string_),
  PROTOBUF_FIELD_OFFSET(::AlphaDAGResponse, error_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Column, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Column, name_),
  PROTOBUF_FIELD_OFFSET(::Column, type_),
  PROTOBUF_FIELD_OFFSET(::Column, mode_),
  PROTOBUF_FIELD_OFFSET(::Column, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZetaSQLColumn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZetaSQLColumn, name_),
  PROTOBUF_FIELD_OFFSET(::ZetaSQLColumn, zetasql_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GenericColumn, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::GenericColumn, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::GenericColumn, column_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TableSchema, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TableSchema, table_name_),
  PROTOBUF_FIELD_OFFSET(::TableSchema, columns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AlphaCheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AlphaCheckRequest, external_required_tables_schema_),
  PROTOBUF_FIELD_OFFSET(::AlphaCheckRequest, dag_dot_string_),
  PROTOBUF_FIELD_OFFSET(::AlphaCheckRequest, files_),
  PROTOBUF_FIELD_OFFSET(::AlphaCheckResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AlphaCheckResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AlphaCheckResponse, error_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::File)},
  { 7, -1, sizeof(::AlphaDAGRequest)},
  { 17, 25, sizeof(::AlphaDAGResponse)},
  { 28, -1, sizeof(::Column)},
  { 37, -1, sizeof(::ZetaSQLColumn)},
  { 44, -1, sizeof(::GenericColumn)},
  { 52, -1, sizeof(::TableSchema)},
  { 59, -1, sizeof(::AlphaCheckRequest)},
  { 67, 73, sizeof(::AlphaCheckResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_File_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AlphaDAGRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AlphaDAGResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Column_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ZetaSQLColumn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GenericColumn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TableSchema_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AlphaCheckRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AlphaCheckResponse_default_instance_),
};

const char descriptor_table_protodef_alphasql_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026alphasql_service.proto\032\ntype.proto\"%\n\004"
  "File\022\014\n\004name\030\001 \001(\t\022\017\n\007content\030\002 \001(\t\"\211\001\n\017"
  "AlphaDAGRequest\022\030\n\020warning_as_error\030\001 \001("
  "\010\022\023\n\013with_tables\030\002 \001(\010\022\026\n\016with_functions"
  "\030\003 \001(\010\022\031\n\021side_effect_first\030\004 \001(\010\022\024\n\005fil"
  "es\030\005 \003(\0132\005.File\"j\n\020AlphaDAGResponse\022 \n\030e"
  "xternal_required_tables\030\001 \003(\t\022\026\n\016dag_dot"
  "_string\030\002 \003(\t\022\022\n\005error\030\003 \001(\tH\000\210\001\001B\010\n\006_er"
  "ror\"b\n\006Column\022\014\n\004name\030\001 \001(\t\022\034\n\004type\030\002 \001("
  "\0162\016.SupportedType\022\023\n\004mode\030\003 \001(\0162\005.Mode\022\027"
  "\n\006fields\030\004 \003(\0132\007.Column\"G\n\rZetaSQLColumn"
  "\022\014\n\004name\030\001 \001(\t\022(\n\014zetasql_type\030\002 \001(\0132\022.z"
  "etasql.TypeProto\"`\n\rGenericColumn\022\032\n\007col"
  "umns\030\002 \001(\0132\007.ColumnH\000\022)\n\017zetasql_columns"
  "\030\003 \001(\0132\016.ZetaSQLColumnH\000B\010\n\006column\"B\n\013Ta"
  "bleSchema\022\022\n\ntable_name\030\001 \001(\t\022\037\n\007columns"
  "\030\002 \003(\0132\016.GenericColumn\"x\n\021AlphaCheckRequ"
  "est\0225\n\037external_required_tables_schema\030\001"
  " \003(\0132\014.TableSchema\022\026\n\016dag_dot_string\030\002 \001"
  "(\t\022\024\n\005files\030\003 \003(\0132\005.File\"2\n\022AlphaCheckRe"
  "sponse\022\022\n\005error\030\001 \001(\tH\000\210\001\001B\010\n\006_error*\306\001\n"
  "\rSupportedType\022\n\n\006STRING\020\000\022\013\n\007INTEGER\020\001\022"
  "\t\n\005INT64\020\002\022\013\n\007BOOLEAN\020\003\022\010\n\004BOOL\020\004\022\013\n\007FLO"
  "AT64\020\005\022\t\n\005FLOAT\020\006\022\013\n\007NUMERIC\020\007\022\t\n\005BYTES\020"
  "\010\022\r\n\tTIMESTAMP\020\t\022\010\n\004TIME\020\n\022\014\n\010DATETIME\020\013"
  "\022\010\n\004DATE\020\014\022\r\n\tGEOGRAPHY\020\r\022\n\n\006RECORD\020\016*0\n"
  "\004Mode\022\014\n\010REPEATED\020\000\022\014\n\010NULLABLE\020\001\022\014\n\010REQ"
  "UIRED\020\0022v\n\010AlphaSQL\0221\n\010AlphaDAG\022\020.AlphaD"
  "AGRequest\032\021.AlphaDAGResponse\"\000\0227\n\nAlphaC"
  "heck\022\022.AlphaCheckRequest\032\023.AlphaCheckRes"
  "ponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_alphasql_5fservice_2eproto_deps[1] = {
  &::descriptor_table_type_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_alphasql_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_alphasql_5fservice_2eproto = {
  false, false, 1215, descriptor_table_protodef_alphasql_5fservice_2eproto, "alphasql_service.proto", 
  &descriptor_table_alphasql_5fservice_2eproto_once, descriptor_table_alphasql_5fservice_2eproto_deps, 1, 9,
  schemas, file_default_instances, TableStruct_alphasql_5fservice_2eproto::offsets,
  file_level_metadata_alphasql_5fservice_2eproto, file_level_enum_descriptors_alphasql_5fservice_2eproto, file_level_service_descriptors_alphasql_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_alphasql_5fservice_2eproto_getter() {
  return &descriptor_table_alphasql_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_alphasql_5fservice_2eproto(&descriptor_table_alphasql_5fservice_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SupportedType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_alphasql_5fservice_2eproto);
  return file_level_enum_descriptors_alphasql_5fservice_2eproto[0];
}
bool SupportedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_alphasql_5fservice_2eproto);
  return file_level_enum_descriptors_alphasql_5fservice_2eproto[1];
}
bool Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class File::_Internal {
 public:
};

File::File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:File)
}
File::File(const File& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:File)
}

inline void File::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

File::~File() {
  // @@protoc_insertion_point(destructor:File)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void File::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void File::ArenaDtor(void* object) {
  File* _this = reinterpret_cast< File* >(object);
  (void)_this;
}
void File::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void File::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void File::Clear() {
// @@protoc_insertion_point(message_clear_start:File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* File::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "File.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "File.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* File::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "File.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "File.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:File)
  return target;
}

size_t File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:File)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData File::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    File::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*File::GetClassData() const { return &_class_data_; }

void File::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<File *>(to)->MergeFrom(
      static_cast<const File &>(from));
}


void File::MergeFrom(const File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:File)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void File::CopyFrom(const File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File::IsInitialized() const {
  return true;
}

void File::InternalSwap(File* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &content_, GetArenaForAllocation(),
      &other->content_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata File::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_alphasql_5fservice_2eproto_getter, &descriptor_table_alphasql_5fservice_2eproto_once,
      file_level_metadata_alphasql_5fservice_2eproto[0]);
}

// ===================================================================

class AlphaDAGRequest::_Internal {
 public:
};

AlphaDAGRequest::AlphaDAGRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  files_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AlphaDAGRequest)
}
AlphaDAGRequest::AlphaDAGRequest(const AlphaDAGRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      files_(from.files_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&warning_as_error_, &from.warning_as_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&side_effect_first_) -
    reinterpret_cast<char*>(&warning_as_error_)) + sizeof(side_effect_first_));
  // @@protoc_insertion_point(copy_constructor:AlphaDAGRequest)
}

inline void AlphaDAGRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&warning_as_error_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&side_effect_first_) -
    reinterpret_cast<char*>(&warning_as_error_)) + sizeof(side_effect_first_));
}

AlphaDAGRequest::~AlphaDAGRequest() {
  // @@protoc_insertion_point(destructor:AlphaDAGRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AlphaDAGRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AlphaDAGRequest::ArenaDtor(void* object) {
  AlphaDAGRequest* _this = reinterpret_cast< AlphaDAGRequest* >(object);
  (void)_this;
}
void AlphaDAGRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AlphaDAGRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AlphaDAGRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AlphaDAGRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  ::memset(&warning_as_error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&side_effect_first_) -
      reinterpret_cast<char*>(&warning_as_error_)) + sizeof(side_effect_first_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlphaDAGRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool warning_as_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          warning_as_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool with_tables = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          with_tables_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool with_functions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          with_functions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool side_effect_first = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          side_effect_first_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .File files = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlphaDAGRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AlphaDAGRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool warning_as_error = 1;
  if (this->_internal_warning_as_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_warning_as_error(), target);
  }

  // bool with_tables = 2;
  if (this->_internal_with_tables() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_with_tables(), target);
  }

  // bool with_functions = 3;
  if (this->_internal_with_functions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_with_functions(), target);
  }

  // bool side_effect_first = 4;
  if (this->_internal_side_effect_first() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_side_effect_first(), target);
  }

  // repeated .File files = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_files_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_files(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AlphaDAGRequest)
  return target;
}

size_t AlphaDAGRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AlphaDAGRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .File files = 5;
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool warning_as_error = 1;
  if (this->_internal_warning_as_error() != 0) {
    total_size += 1 + 1;
  }

  // bool with_tables = 2;
  if (this->_internal_with_tables() != 0) {
    total_size += 1 + 1;
  }

  // bool with_functions = 3;
  if (this->_internal_with_functions() != 0) {
    total_size += 1 + 1;
  }

  // bool side_effect_first = 4;
  if (this->_internal_side_effect_first() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlphaDAGRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AlphaDAGRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlphaDAGRequest::GetClassData() const { return &_class_data_; }

void AlphaDAGRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AlphaDAGRequest *>(to)->MergeFrom(
      static_cast<const AlphaDAGRequest &>(from));
}


void AlphaDAGRequest::MergeFrom(const AlphaDAGRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AlphaDAGRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  if (from._internal_warning_as_error() != 0) {
    _internal_set_warning_as_error(from._internal_warning_as_error());
  }
  if (from._internal_with_tables() != 0) {
    _internal_set_with_tables(from._internal_with_tables());
  }
  if (from._internal_with_functions() != 0) {
    _internal_set_with_functions(from._internal_with_functions());
  }
  if (from._internal_side_effect_first() != 0) {
    _internal_set_side_effect_first(from._internal_side_effect_first());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlphaDAGRequest::CopyFrom(const AlphaDAGRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AlphaDAGRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlphaDAGRequest::IsInitialized() const {
  return true;
}

void AlphaDAGRequest::InternalSwap(AlphaDAGRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  files_.InternalSwap(&other->files_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AlphaDAGRequest, side_effect_first_)
      + sizeof(AlphaDAGRequest::side_effect_first_)
      - PROTOBUF_FIELD_OFFSET(AlphaDAGRequest, warning_as_error_)>(
          reinterpret_cast<char*>(&warning_as_error_),
          reinterpret_cast<char*>(&other->warning_as_error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AlphaDAGRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_alphasql_5fservice_2eproto_getter, &descriptor_table_alphasql_5fservice_2eproto_once,
      file_level_metadata_alphasql_5fservice_2eproto[1]);
}

// ===================================================================

class AlphaDAGResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AlphaDAGResponse>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AlphaDAGResponse::AlphaDAGResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  external_required_tables_(arena),
  dag_dot_string_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AlphaDAGResponse)
}
AlphaDAGResponse::AlphaDAGResponse(const AlphaDAGResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      external_required_tables_(from.external_required_tables_),
      dag_dot_string_(from.dag_dot_string_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:AlphaDAGResponse)
}

inline void AlphaDAGResponse::SharedCtor() {
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AlphaDAGResponse::~AlphaDAGResponse() {
  // @@protoc_insertion_point(destructor:AlphaDAGResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AlphaDAGResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AlphaDAGResponse::ArenaDtor(void* object) {
  AlphaDAGResponse* _this = reinterpret_cast< AlphaDAGResponse* >(object);
  (void)_this;
}
void AlphaDAGResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AlphaDAGResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AlphaDAGResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AlphaDAGResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  external_required_tables_.Clear();
  dag_dot_string_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlphaDAGResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string external_required_tables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_external_required_tables();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AlphaDAGResponse.external_required_tables"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string dag_dot_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dag_dot_string();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AlphaDAGResponse.dag_dot_string"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AlphaDAGResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlphaDAGResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AlphaDAGResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string external_required_tables = 1;
  for (int i = 0, n = this->_internal_external_required_tables_size(); i < n; i++) {
    const auto& s = this->_internal_external_required_tables(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AlphaDAGResponse.external_required_tables");
    target = stream->WriteString(1, s, target);
  }

  // repeated string dag_dot_string = 2;
  for (int i = 0, n = this->_internal_dag_dot_string_size(); i < n; i++) {
    const auto& s = this->_internal_dag_dot_string(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AlphaDAGResponse.dag_dot_string");
    target = stream->WriteString(2, s, target);
  }

  // optional string error = 3;
  if (_internal_has_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AlphaDAGResponse.error");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AlphaDAGResponse)
  return target;
}

size_t AlphaDAGResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AlphaDAGResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string external_required_tables = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(external_required_tables_.size());
  for (int i = 0, n = external_required_tables_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      external_required_tables_.Get(i));
  }

  // repeated string dag_dot_string = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dag_dot_string_.size());
  for (int i = 0, n = dag_dot_string_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      dag_dot_string_.Get(i));
  }

  // optional string error = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlphaDAGResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AlphaDAGResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlphaDAGResponse::GetClassData() const { return &_class_data_; }

void AlphaDAGResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AlphaDAGResponse *>(to)->MergeFrom(
      static_cast<const AlphaDAGResponse &>(from));
}


void AlphaDAGResponse::MergeFrom(const AlphaDAGResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AlphaDAGResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  external_required_tables_.MergeFrom(from.external_required_tables_);
  dag_dot_string_.MergeFrom(from.dag_dot_string_);
  if (from._internal_has_error()) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlphaDAGResponse::CopyFrom(const AlphaDAGResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AlphaDAGResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlphaDAGResponse::IsInitialized() const {
  return true;
}

void AlphaDAGResponse::InternalSwap(AlphaDAGResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  external_required_tables_.InternalSwap(&other->external_required_tables_);
  dag_dot_string_.InternalSwap(&other->dag_dot_string_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AlphaDAGResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_alphasql_5fservice_2eproto_getter, &descriptor_table_alphasql_5fservice_2eproto_once,
      file_level_metadata_alphasql_5fservice_2eproto[2]);
}

// ===================================================================

class Column::_Internal {
 public:
};

Column::Column(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  fields_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Column)
}
Column::Column(const Column& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&type_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:Column)
}

inline void Column::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&type_)) + sizeof(mode_));
}

Column::~Column() {
  // @@protoc_insertion_point(destructor:Column)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Column::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Column::ArenaDtor(void* object) {
  Column* _this = reinterpret_cast< Column* >(object);
  (void)_this;
}
void Column::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Column::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Column::Clear() {
// @@protoc_insertion_point(message_clear_start:Column)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  name_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&type_)) + sizeof(mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Column::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Column.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SupportedType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::SupportedType>(val));
        } else goto handle_unusual;
        continue;
      // .Mode mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::Mode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .Column fields = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Column::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Column)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Column.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .SupportedType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .Mode mode = 3;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mode(), target);
  }

  // repeated .Column fields = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Column)
  return target;
}

size_t Column::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Column)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Column fields = 4;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .SupportedType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .Mode mode = 3;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Column::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Column::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Column::GetClassData() const { return &_class_data_; }

void Column::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Column *>(to)->MergeFrom(
      static_cast<const Column &>(from));
}


void Column::MergeFrom(const Column& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Column)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Column::CopyFrom(const Column& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Column::IsInitialized() const {
  return true;
}

void Column::InternalSwap(Column* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Column, mode_)
      + sizeof(Column::mode_)
      - PROTOBUF_FIELD_OFFSET(Column, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Column::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_alphasql_5fservice_2eproto_getter, &descriptor_table_alphasql_5fservice_2eproto_once,
      file_level_metadata_alphasql_5fservice_2eproto[3]);
}

// ===================================================================

class ZetaSQLColumn::_Internal {
 public:
  static const ::zetasql::TypeProto& zetasql_type(const ZetaSQLColumn* msg);
};

const ::zetasql::TypeProto&
ZetaSQLColumn::_Internal::zetasql_type(const ZetaSQLColumn* msg) {
  return *msg->zetasql_type_;
}
void ZetaSQLColumn::clear_zetasql_type() {
  if (GetArenaForAllocation() == nullptr && zetasql_type_ != nullptr) {
    delete zetasql_type_;
  }
  zetasql_type_ = nullptr;
}
ZetaSQLColumn::ZetaSQLColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ZetaSQLColumn)
}
ZetaSQLColumn::ZetaSQLColumn(const ZetaSQLColumn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_zetasql_type()) {
    zetasql_type_ = new ::zetasql::TypeProto(*from.zetasql_type_);
  } else {
    zetasql_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ZetaSQLColumn)
}

inline void ZetaSQLColumn::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
zetasql_type_ = nullptr;
}

ZetaSQLColumn::~ZetaSQLColumn() {
  // @@protoc_insertion_point(destructor:ZetaSQLColumn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ZetaSQLColumn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete zetasql_type_;
}

void ZetaSQLColumn::ArenaDtor(void* object) {
  ZetaSQLColumn* _this = reinterpret_cast< ZetaSQLColumn* >(object);
  (void)_this;
}
void ZetaSQLColumn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZetaSQLColumn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ZetaSQLColumn::Clear() {
// @@protoc_insertion_point(message_clear_start:ZetaSQLColumn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && zetasql_type_ != nullptr) {
    delete zetasql_type_;
  }
  zetasql_type_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZetaSQLColumn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ZetaSQLColumn.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zetasql.TypeProto zetasql_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_zetasql_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ZetaSQLColumn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZetaSQLColumn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ZetaSQLColumn.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .zetasql.TypeProto zetasql_type = 2;
  if (this->_internal_has_zetasql_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::zetasql_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZetaSQLColumn)
  return target;
}

size_t ZetaSQLColumn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZetaSQLColumn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .zetasql.TypeProto zetasql_type = 2;
  if (this->_internal_has_zetasql_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *zetasql_type_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZetaSQLColumn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ZetaSQLColumn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZetaSQLColumn::GetClassData() const { return &_class_data_; }

void ZetaSQLColumn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ZetaSQLColumn *>(to)->MergeFrom(
      static_cast<const ZetaSQLColumn &>(from));
}


void ZetaSQLColumn::MergeFrom(const ZetaSQLColumn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZetaSQLColumn)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_zetasql_type()) {
    _internal_mutable_zetasql_type()->::zetasql::TypeProto::MergeFrom(from._internal_zetasql_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZetaSQLColumn::CopyFrom(const ZetaSQLColumn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZetaSQLColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZetaSQLColumn::IsInitialized() const {
  if (_internal_has_zetasql_type()) {
    if (!zetasql_type_->IsInitialized()) return false;
  }
  return true;
}

void ZetaSQLColumn::InternalSwap(ZetaSQLColumn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(zetasql_type_, other->zetasql_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ZetaSQLColumn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_alphasql_5fservice_2eproto_getter, &descriptor_table_alphasql_5fservice_2eproto_once,
      file_level_metadata_alphasql_5fservice_2eproto[4]);
}

// ===================================================================

class GenericColumn::_Internal {
 public:
  static const ::Column& columns(const GenericColumn* msg);
  static const ::ZetaSQLColumn& zetasql_columns(const GenericColumn* msg);
};

const ::Column&
GenericColumn::_Internal::columns(const GenericColumn* msg) {
  return *msg->column_.columns_;
}
const ::ZetaSQLColumn&
GenericColumn::_Internal::zetasql_columns(const GenericColumn* msg) {
  return *msg->column_.zetasql_columns_;
}
void GenericColumn::set_allocated_columns(::Column* columns) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_column();
  if (columns) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Column>::GetOwningArena(columns);
    if (message_arena != submessage_arena) {
      columns = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, columns, submessage_arena);
    }
    set_has_columns();
    column_.columns_ = columns;
  }
  // @@protoc_insertion_point(field_set_allocated:GenericColumn.columns)
}
void GenericColumn::set_allocated_zetasql_columns(::ZetaSQLColumn* zetasql_columns) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_column();
  if (zetasql_columns) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ZetaSQLColumn>::GetOwningArena(zetasql_columns);
    if (message_arena != submessage_arena) {
      zetasql_columns = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zetasql_columns, submessage_arena);
    }
    set_has_zetasql_columns();
    column_.zetasql_columns_ = zetasql_columns;
  }
  // @@protoc_insertion_point(field_set_allocated:GenericColumn.zetasql_columns)
}
GenericColumn::GenericColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:GenericColumn)
}
GenericColumn::GenericColumn(const GenericColumn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_column();
  switch (from.column_case()) {
    case kColumns: {
      _internal_mutable_columns()->::Column::MergeFrom(from._internal_columns());
      break;
    }
    case kZetasqlColumns: {
      _internal_mutable_zetasql_columns()->::ZetaSQLColumn::MergeFrom(from._internal_zetasql_columns());
      break;
    }
    case COLUMN_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:GenericColumn)
}

inline void GenericColumn::SharedCtor() {
clear_has_column();
}

GenericColumn::~GenericColumn() {
  // @@protoc_insertion_point(destructor:GenericColumn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GenericColumn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_column()) {
    clear_column();
  }
}

void GenericColumn::ArenaDtor(void* object) {
  GenericColumn* _this = reinterpret_cast< GenericColumn* >(object);
  (void)_this;
}
void GenericColumn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenericColumn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenericColumn::clear_column() {
// @@protoc_insertion_point(one_of_clear_start:GenericColumn)
  switch (column_case()) {
    case kColumns: {
      if (GetArenaForAllocation() == nullptr) {
        delete column_.columns_;
      }
      break;
    }
    case kZetasqlColumns: {
      if (GetArenaForAllocation() == nullptr) {
        delete column_.zetasql_columns_;
      }
      break;
    }
    case COLUMN_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COLUMN_NOT_SET;
}


void GenericColumn::Clear() {
// @@protoc_insertion_point(message_clear_start:GenericColumn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_column();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenericColumn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Column columns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_columns(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ZetaSQLColumn zetasql_columns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_zetasql_columns(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericColumn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GenericColumn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Column columns = 2;
  if (_internal_has_columns()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::columns(this), target, stream);
  }

  // .ZetaSQLColumn zetasql_columns = 3;
  if (_internal_has_zetasql_columns()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::zetasql_columns(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GenericColumn)
  return target;
}

size_t GenericColumn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GenericColumn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (column_case()) {
    // .Column columns = 2;
    case kColumns: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *column_.columns_);
      break;
    }
    // .ZetaSQLColumn zetasql_columns = 3;
    case kZetasqlColumns: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *column_.zetasql_columns_);
      break;
    }
    case COLUMN_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenericColumn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenericColumn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenericColumn::GetClassData() const { return &_class_data_; }

void GenericColumn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GenericColumn *>(to)->MergeFrom(
      static_cast<const GenericColumn &>(from));
}


void GenericColumn::MergeFrom(const GenericColumn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GenericColumn)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.column_case()) {
    case kColumns: {
      _internal_mutable_columns()->::Column::MergeFrom(from._internal_columns());
      break;
    }
    case kZetasqlColumns: {
      _internal_mutable_zetasql_columns()->::ZetaSQLColumn::MergeFrom(from._internal_zetasql_columns());
      break;
    }
    case COLUMN_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenericColumn::CopyFrom(const GenericColumn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GenericColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericColumn::IsInitialized() const {
  switch (column_case()) {
    case kColumns: {
      break;
    }
    case kZetasqlColumns: {
      if (has_zetasql_columns()) {
        if (!this->zetasql_columns().IsInitialized()) return false;
      }
      break;
    }
    case COLUMN_NOT_SET: {
      break;
    }
  }
  return true;
}

void GenericColumn::InternalSwap(GenericColumn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(column_, other->column_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericColumn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_alphasql_5fservice_2eproto_getter, &descriptor_table_alphasql_5fservice_2eproto_once,
      file_level_metadata_alphasql_5fservice_2eproto[5]);
}

// ===================================================================

class TableSchema::_Internal {
 public:
};

TableSchema::TableSchema(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  columns_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TableSchema)
}
TableSchema::TableSchema(const TableSchema& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      columns_(from.columns_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_table_name().empty()) {
    table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TableSchema)
}

inline void TableSchema::SharedCtor() {
table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TableSchema::~TableSchema() {
  // @@protoc_insertion_point(destructor:TableSchema)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableSchema::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TableSchema::ArenaDtor(void* object) {
  TableSchema* _this = reinterpret_cast< TableSchema* >(object);
  (void)_this;
}
void TableSchema::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableSchema::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableSchema::Clear() {
// @@protoc_insertion_point(message_clear_start:TableSchema)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  table_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableSchema::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TableSchema.table_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .GenericColumn columns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_columns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableSchema::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TableSchema)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TableSchema.table_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_table_name(), target);
  }

  // repeated .GenericColumn columns = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_columns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_columns(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TableSchema)
  return target;
}

size_t TableSchema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TableSchema)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GenericColumn columns = 2;
  total_size += 1UL * this->_internal_columns_size();
  for (const auto& msg : this->columns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string table_name = 1;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableSchema::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableSchema::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableSchema::GetClassData() const { return &_class_data_; }

void TableSchema::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TableSchema *>(to)->MergeFrom(
      static_cast<const TableSchema &>(from));
}


void TableSchema::MergeFrom(const TableSchema& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TableSchema)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  if (!from._internal_table_name().empty()) {
    _internal_set_table_name(from._internal_table_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableSchema::CopyFrom(const TableSchema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TableSchema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableSchema::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(columns_)) return false;
  return true;
}

void TableSchema::InternalSwap(TableSchema* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  columns_.InternalSwap(&other->columns_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_name_, GetArenaForAllocation(),
      &other->table_name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TableSchema::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_alphasql_5fservice_2eproto_getter, &descriptor_table_alphasql_5fservice_2eproto_once,
      file_level_metadata_alphasql_5fservice_2eproto[6]);
}

// ===================================================================

class AlphaCheckRequest::_Internal {
 public:
};

AlphaCheckRequest::AlphaCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  external_required_tables_schema_(arena),
  files_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AlphaCheckRequest)
}
AlphaCheckRequest::AlphaCheckRequest(const AlphaCheckRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      external_required_tables_schema_(from.external_required_tables_schema_),
      files_(from.files_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dag_dot_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dag_dot_string().empty()) {
    dag_dot_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dag_dot_string(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:AlphaCheckRequest)
}

inline void AlphaCheckRequest::SharedCtor() {
dag_dot_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AlphaCheckRequest::~AlphaCheckRequest() {
  // @@protoc_insertion_point(destructor:AlphaCheckRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AlphaCheckRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dag_dot_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AlphaCheckRequest::ArenaDtor(void* object) {
  AlphaCheckRequest* _this = reinterpret_cast< AlphaCheckRequest* >(object);
  (void)_this;
}
void AlphaCheckRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AlphaCheckRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AlphaCheckRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AlphaCheckRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  external_required_tables_schema_.Clear();
  files_.Clear();
  dag_dot_string_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlphaCheckRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TableSchema external_required_tables_schema = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_external_required_tables_schema(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string dag_dot_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dag_dot_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AlphaCheckRequest.dag_dot_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .File files = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlphaCheckRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AlphaCheckRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TableSchema external_required_tables_schema = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_external_required_tables_schema_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_external_required_tables_schema(i), target, stream);
  }

  // string dag_dot_string = 2;
  if (!this->_internal_dag_dot_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dag_dot_string().data(), static_cast<int>(this->_internal_dag_dot_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AlphaCheckRequest.dag_dot_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dag_dot_string(), target);
  }

  // repeated .File files = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_files_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_files(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AlphaCheckRequest)
  return target;
}

size_t AlphaCheckRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AlphaCheckRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TableSchema external_required_tables_schema = 1;
  total_size += 1UL * this->_internal_external_required_tables_schema_size();
  for (const auto& msg : this->external_required_tables_schema_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .File files = 3;
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string dag_dot_string = 2;
  if (!this->_internal_dag_dot_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dag_dot_string());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlphaCheckRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AlphaCheckRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlphaCheckRequest::GetClassData() const { return &_class_data_; }

void AlphaCheckRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AlphaCheckRequest *>(to)->MergeFrom(
      static_cast<const AlphaCheckRequest &>(from));
}


void AlphaCheckRequest::MergeFrom(const AlphaCheckRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AlphaCheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  external_required_tables_schema_.MergeFrom(from.external_required_tables_schema_);
  files_.MergeFrom(from.files_);
  if (!from._internal_dag_dot_string().empty()) {
    _internal_set_dag_dot_string(from._internal_dag_dot_string());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlphaCheckRequest::CopyFrom(const AlphaCheckRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AlphaCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlphaCheckRequest::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(external_required_tables_schema_)) return false;
  return true;
}

void AlphaCheckRequest::InternalSwap(AlphaCheckRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  external_required_tables_schema_.InternalSwap(&other->external_required_tables_schema_);
  files_.InternalSwap(&other->files_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dag_dot_string_, GetArenaForAllocation(),
      &other->dag_dot_string_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AlphaCheckRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_alphasql_5fservice_2eproto_getter, &descriptor_table_alphasql_5fservice_2eproto_once,
      file_level_metadata_alphasql_5fservice_2eproto[7]);
}

// ===================================================================

class AlphaCheckResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AlphaCheckResponse>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AlphaCheckResponse::AlphaCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AlphaCheckResponse)
}
AlphaCheckResponse::AlphaCheckResponse(const AlphaCheckResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:AlphaCheckResponse)
}

inline void AlphaCheckResponse::SharedCtor() {
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AlphaCheckResponse::~AlphaCheckResponse() {
  // @@protoc_insertion_point(destructor:AlphaCheckResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AlphaCheckResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AlphaCheckResponse::ArenaDtor(void* object) {
  AlphaCheckResponse* _this = reinterpret_cast< AlphaCheckResponse* >(object);
  (void)_this;
}
void AlphaCheckResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AlphaCheckResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AlphaCheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AlphaCheckResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlphaCheckResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AlphaCheckResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlphaCheckResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AlphaCheckResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string error = 1;
  if (_internal_has_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AlphaCheckResponse.error");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AlphaCheckResponse)
  return target;
}

size_t AlphaCheckResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AlphaCheckResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string error = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlphaCheckResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AlphaCheckResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlphaCheckResponse::GetClassData() const { return &_class_data_; }

void AlphaCheckResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AlphaCheckResponse *>(to)->MergeFrom(
      static_cast<const AlphaCheckResponse &>(from));
}


void AlphaCheckResponse::MergeFrom(const AlphaCheckResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AlphaCheckResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlphaCheckResponse::CopyFrom(const AlphaCheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AlphaCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlphaCheckResponse::IsInitialized() const {
  return true;
}

void AlphaCheckResponse::InternalSwap(AlphaCheckResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AlphaCheckResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_alphasql_5fservice_2eproto_getter, &descriptor_table_alphasql_5fservice_2eproto_once,
      file_level_metadata_alphasql_5fservice_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::File* Arena::CreateMaybeMessage< ::File >(Arena* arena) {
  return Arena::CreateMessageInternal< ::File >(arena);
}
template<> PROTOBUF_NOINLINE ::AlphaDAGRequest* Arena::CreateMaybeMessage< ::AlphaDAGRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AlphaDAGRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AlphaDAGResponse* Arena::CreateMaybeMessage< ::AlphaDAGResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AlphaDAGResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Column* Arena::CreateMaybeMessage< ::Column >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Column >(arena);
}
template<> PROTOBUF_NOINLINE ::ZetaSQLColumn* Arena::CreateMaybeMessage< ::ZetaSQLColumn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZetaSQLColumn >(arena);
}
template<> PROTOBUF_NOINLINE ::GenericColumn* Arena::CreateMaybeMessage< ::GenericColumn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GenericColumn >(arena);
}
template<> PROTOBUF_NOINLINE ::TableSchema* Arena::CreateMaybeMessage< ::TableSchema >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TableSchema >(arena);
}
template<> PROTOBUF_NOINLINE ::AlphaCheckRequest* Arena::CreateMaybeMessage< ::AlphaCheckRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AlphaCheckRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AlphaCheckResponse* Arena::CreateMaybeMessage< ::AlphaCheckResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AlphaCheckResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
