name: release
on:
  release:
    types: [ published ]
env:
  GITHUB_TOKEN: ${{ github.token }}
jobs:
  osx:
    name: Create artifacts on macOS-latest
    runs-on: macOS-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - name: Cache
        uses: actions/cache@v2
        with:
          path: /private/var/tmp/*bazel*
          key: ${{ runner.os }}-bazelisk-build-${{ hashFiles('./**') }}
          restore-keys: ${{ runner.os }}-bazelisk-build-
      - name: Build
        shell: bash
        run: |
          make
          mkdir alphasql_darwin_amd64
          mv ./bazel-bin/alphasql/dag ./alphasql_darwin_amd64/dag
          mv ./bazel-bin/alphasql/pipeline_type_checker ./alphasql_darwin_amd64/pipeline_type_checker
          tar -zcvf alphasql_darwin_amd64.tar.gz alphasql_darwin_amd64
      - name: Get Release
        id: get
        uses: bruceadams/get-release@v1.2.0
      - name: Upload OSX Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: alphasql_darwin_amd64.tar.gz
          asset_name: alphasql_darwin_amd64.tar.gz
          asset_content_type: application/tar+gzip
      - name: Test installation
        shell: bash
        run: |
          temp=$(mktemp -d)
          wget -P $temp https://github.com/Matts966/alphasql/releases/latest/download/alphasql_darwin_amd64.tar.gz \
            && tar -zxvf $temp/alphasql_darwin_amd64.tar.gz -C /usr/local/bin --strip=1
          dag .

  linux:
    name: Create artifacts on Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - name: Cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/bazel
          key: ${{ runner.os }}-bazelisk-build-${{ hashFiles('./**') }}
          restore-keys: ${{ runner.os }}-bazelisk-build-
      - name: Build
        run: |
            sudo apt-get update
            sudo apt-get install --no-install-recommends -y gcc-9 g++-9
            sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 900 \
              --slave /usr/bin/g++ g++ /usr/bin/g++-9
            bazelisk build //...
            mkdir alphasql_linux_x86_64
            mv ./bazel-bin/alphasql/dag ./alphasql_linux_x86_64/dag
            mv ./bazel-bin/alphasql/pipeline_type_checker ./alphasql_linux_x86_64/pipeline_type_checker
            tar -zcvf alphasql_linux_x86_64.tar.gz alphasql_linux_x86_64
      - name: Get Release
        id: get
        uses: bruceadams/get-release@v1.2.0
      - name: Upload Linux Asset
        id: upload-linux-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: alphasql_linux_x86_64.tar.gz
          asset_name: alphasql_linux_x86_64.tar.gz
          asset_content_type: application/tar+gzip
      - name: Test installation
        shell: bash
        run: |
          temp=$(mktemp -d)
          wget -P $temp https://github.com/Matts966/alphasql/releases/latest/download/alphasql_linux_x86_64.tar.gz \
            && tar -zxvf $temp/alphasql_linux_x86_64.tar.gz -C /usr/local/bin --strip=1
          dag .

  docker-hub:
    name: Push image to docker hub
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - name: Docker Build and Push
        uses: docker/build-push-action@v1
        env:
          DOCKER_BUILDKIT: 1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: matts966/alphasql
          tag_with_ref: true
          dockerfile: docker/Dockerfile
          cache_froms: matts966/alphasql:latest
      - name: Test installation
        shell: bash
        run: |
          docker run matts966:alphasql dag .

  docker-github:
    name: Push image to GitHub Packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - name: Push to GitHub Packages
        uses: docker/build-push-action@v1
        env:
          DOCKER_BUILDKIT: 1
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: docker.pkg.github.com
          repository: matts966/alphasql/alphasql
          tag_with_ref: true
          dockerfile: docker/Dockerfile
          cache_froms: matts966/alphasql:latest
